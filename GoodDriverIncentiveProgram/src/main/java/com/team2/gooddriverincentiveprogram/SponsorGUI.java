 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.team2.gooddriverincentiveprogram;

import java.awt.Image;
import java.net.URI;
import java.net.URL;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.Timestamp;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import org.json.JSONObject;
import org.springframework.security.crypto.bcrypt.BCrypt;

/**
 *
 * @author benjaminjoye
 */
public class SponsorGUI extends javax.swing.JFrame {

    /**
     * Creates new form sponsor
     */
    public SponsorGUI() {
        initComponents();
    }
    
    private int userID;
    private static final int ITEM_REQUEST_LIMIT = 10;
    private String lastImageURL;
    private Boolean searchTableSelected = false;
    private Boolean catalogTableSelected = false;
    private int currentCatalogDriverSelected = 0;
    private Deque<CatalogItem> previousQueue;
    private Deque<CatalogItem> nextQueue;
    private Boolean hasDrivers;
    private Boolean loggingIn;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        reportingPanelBtn = new javax.swing.JButton();
        CreateDriverButton = new javax.swing.JButton();
        CreateSponsorButton = new javax.swing.JButton();
        SwitchtoDriverView = new javax.swing.JButton();
        layeredPane = new javax.swing.JLayeredPane();
        myAccount = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton26 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton27 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        myApplication = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        approveApplicationButton = new javax.swing.JButton();
        declineApplicationButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        applicationTable = new javax.swing.JTable();
        reasonTextField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        catalog = new javax.swing.JPanel();
        CatalogTitleLabel = new javax.swing.JLabel();
        CatalogItemPanel = new javax.swing.JPanel();
        FirstCatalogItemPanel = new javax.swing.JPanel();
        FirstItemPointCostLabel = new javax.swing.JLabel();
        FirstItemBuyButton = new javax.swing.JButton();
        FirstItemImageLabel = new javax.swing.JLabel();
        FirstItemTitleScrollPane = new javax.swing.JScrollPane();
        FirstItemTitleTextArea = new javax.swing.JTextArea();
        FirstItemImageURLLabel = new javax.swing.JLabel();
        SecondCatalogItemPanel = new javax.swing.JPanel();
        SecondItemPointCostLabel = new javax.swing.JLabel();
        SecondItemBuyButton = new javax.swing.JButton();
        SecondItemImageLabel = new javax.swing.JLabel();
        SecondItemTitleScrollPane = new javax.swing.JScrollPane();
        SecondItemTitleTextArea = new javax.swing.JTextArea();
        SecondItemImageURLLabel = new javax.swing.JLabel();
        ThirdCatalogItemPanel = new javax.swing.JPanel();
        ThirdItemPointCostLabel = new javax.swing.JLabel();
        ThirdItemBuyButton = new javax.swing.JButton();
        ThirdItemImageLabel = new javax.swing.JLabel();
        ThirdItemTitleScrollPane = new javax.swing.JScrollPane();
        ThirdItemTitleTextArea = new javax.swing.JTextArea();
        ThirdItemImageURLLabel = new javax.swing.JLabel();
        FourthCatalogItemPanel = new javax.swing.JPanel();
        FourthItemPointCostLabel = new javax.swing.JLabel();
        FourthItemBuyButton = new javax.swing.JButton();
        FourthItemImageLabel = new javax.swing.JLabel();
        FourthItemTitleScrollPane = new javax.swing.JScrollPane();
        FourthItemTitleTextArea = new javax.swing.JTextArea();
        FourthItemImageURLLabel = new javax.swing.JLabel();
        PreviousCatalogButton = new javax.swing.JButton();
        NextCatalogButton = new javax.swing.JButton();
        DriverUserCatalogScrollPane = new javax.swing.JScrollPane();
        DriverUserCatalogList = new javax.swing.JList<>();
        ChangeDriverCatalogLabel = new javax.swing.JLabel();
        catalogEditor = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        reporting = new javax.swing.JPanel();
        reportScrollPane = new javax.swing.JScrollPane();
        driverReportTable = new javax.swing.JTable();
        filterText = new javax.swing.JTextField();
        filterLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        driverFilterDD = new javax.swing.JComboBox<>();
        driverPoints = new javax.swing.JPanel();
        driverListScrollPane = new javax.swing.JScrollPane();
        driverList = new javax.swing.JList<>();
        submitPtChBtn = new javax.swing.JButton();
        driverListLabel = new javax.swing.JLabel();
        pointChangeLabel = new javax.swing.JLabel();
        pointChangeVal = new javax.swing.JTextField();
        reasonLabel = new javax.swing.JLabel();
        reasonText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        driverFirstNameField = new javax.swing.JTextField();
        driverLastNameField = new javax.swing.JTextField();
        driverPreferredNameField = new javax.swing.JTextField();
        driverUsernameField = new javax.swing.JTextField();
        updateDriverInfoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(45, 49, 66));

        jButton6.setText("Log Out");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Catalog Editor");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Driver Applications");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Catalog");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton23.setText("My Account");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton28.setText("Driver Points / Info");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        reportingPanelBtn.setText("Reporting");
        reportingPanelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportingPanelBtnActionPerformed(evt);
            }
        });

        CreateDriverButton.setText("Create Driver");
        CreateDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDriverButtonActionPerformed(evt);
            }
        });

        CreateSponsorButton.setText("Create Sponsor");
        CreateSponsorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateSponsorButtonActionPerformed(evt);
            }
        });

        SwitchtoDriverView.setText("Switch to Driver View");
        SwitchtoDriverView.setActionCommand("SwitchtoDriverView");
        SwitchtoDriverView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwitchtoDriverViewActionPerformed(evt);
            }
        });

        layeredPane.setLayout(new java.awt.CardLayout());

        myAccount.setBackground(new java.awt.Color(191, 192, 192));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Account");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Name:");

        jTextField1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton24.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton24.setText("Update");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Username:");

        jTextField2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jButton25.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton25.setText("Update");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Preferred Name:");

        jTextField3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jButton26.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton26.setText("Update");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Password:");

        jButton27.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton27.setText("Update");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel16.setText("Sponsor");

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel18.setText("Account Type:");

        jPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout myAccountLayout = new javax.swing.GroupLayout(myAccount);
        myAccount.setLayout(myAccountLayout);
        myAccountLayout.setHorizontalGroup(
            myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myAccountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(myAccountLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myAccountLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(82, 82, 82)
                        .addComponent(jLabel16))
                    .addGroup(myAccountLayout.createSequentialGroup()
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(61, 61, 61)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addComponent(jPasswordField1))
                        .addGap(18, 18, 18)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButton27))))
                .addContainerGap(516, Short.MAX_VALUE))
        );
        myAccountLayout.setVerticalGroup(
            myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myAccountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton24))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton25))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton26))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton27)
                    .addComponent(jPasswordField1))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel16))
                .addGap(164, 164, 164))
        );

        layeredPane.add(myAccount, "card2");

        myApplication.setBackground(new java.awt.Color(191, 192, 192));

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Driver Applications");

        approveApplicationButton.setText("Approve");
        approveApplicationButton.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                approveApplicationButtonAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        approveApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveApplicationButtonActionPerformed(evt);
            }
        });

        declineApplicationButton.setText("Decline");
        declineApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineApplicationButtonActionPerformed(evt);
            }
        });

        applicationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Application ID", "First Name", "Last Name", "Username", "Status", "Reason", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(applicationTable);

        reasonTextField.setToolTipText("");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Reason:");

        javax.swing.GroupLayout myApplicationLayout = new javax.swing.GroupLayout(myApplication);
        myApplication.setLayout(myApplicationLayout);
        myApplicationLayout.setHorizontalGroup(
            myApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myApplicationLayout.createSequentialGroup()
                .addGroup(myApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myApplicationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(myApplicationLayout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reasonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myApplicationLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(approveApplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(declineApplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(478, 478, 478))
            .addGroup(myApplicationLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1055, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        myApplicationLayout.setVerticalGroup(
            myApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myApplicationLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 37, Short.MAX_VALUE)
                .addGroup(myApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(reasonTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(myApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(declineApplicationButton)
                    .addComponent(approveApplicationButton))
                .addGap(67, 67, 67))
        );

        layeredPane.add(myApplication, "card3");

        catalog.setBackground(new java.awt.Color(191, 192, 192));

        CatalogTitleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        CatalogTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CatalogTitleLabel.setText("Catalog");

        CatalogItemPanel.setMinimumSize(new java.awt.Dimension(833, 307));

        FirstItemPointCostLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FirstItemPointCostLabel.setText("Point Price");

        FirstItemBuyButton.setText("Buy for Driver");
        FirstItemBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstItemBuyButtonActionPerformed(evt);
            }
        });

        FirstItemTitleTextArea.setColumns(20);
        FirstItemTitleTextArea.setRows(5);
        FirstItemTitleScrollPane.setViewportView(FirstItemTitleTextArea);

        FirstItemImageURLLabel.setText("ImageURL");

        javax.swing.GroupLayout FirstCatalogItemPanelLayout = new javax.swing.GroupLayout(FirstCatalogItemPanel);
        FirstCatalogItemPanel.setLayout(FirstCatalogItemPanelLayout);
        FirstCatalogItemPanelLayout.setHorizontalGroup(
            FirstCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FirstCatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FirstCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FirstItemBuyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FirstItemPointCostLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FirstCatalogItemPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(FirstItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(180, 180, 180))
            .addGroup(FirstCatalogItemPanelLayout.createSequentialGroup()
                .addGroup(FirstCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FirstCatalogItemPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(FirstItemImageURLLabel))
                    .addGroup(FirstCatalogItemPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(FirstItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FirstCatalogItemPanelLayout.setVerticalGroup(
            FirstCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FirstCatalogItemPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(FirstItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FirstItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FirstItemPointCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FirstItemBuyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(FirstItemImageURLLabel)
                .addContainerGap())
        );

        SecondItemPointCostLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SecondItemPointCostLabel.setText("Point Price");

        SecondItemBuyButton.setText("Buy for Driver");
        SecondItemBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecondItemBuyButtonActionPerformed(evt);
            }
        });

        SecondItemTitleTextArea.setColumns(20);
        SecondItemTitleTextArea.setRows(5);
        SecondItemTitleScrollPane.setViewportView(SecondItemTitleTextArea);

        SecondItemImageURLLabel.setText("ImageURL");

        javax.swing.GroupLayout SecondCatalogItemPanelLayout = new javax.swing.GroupLayout(SecondCatalogItemPanel);
        SecondCatalogItemPanel.setLayout(SecondCatalogItemPanelLayout);
        SecondCatalogItemPanelLayout.setHorizontalGroup(
            SecondCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecondCatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SecondCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SecondCatalogItemPanelLayout.createSequentialGroup()
                        .addComponent(SecondItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(SecondCatalogItemPanelLayout.createSequentialGroup()
                        .addGroup(SecondCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SecondItemBuyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SecondItemTitleScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(SecondItemPointCostLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(SecondCatalogItemPanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(SecondItemImageURLLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SecondCatalogItemPanelLayout.setVerticalGroup(
            SecondCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecondCatalogItemPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(SecondItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SecondItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SecondItemPointCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SecondItemBuyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SecondItemImageURLLabel)
                .addContainerGap())
        );

        ThirdItemPointCostLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ThirdItemPointCostLabel.setText("Point Price");

        ThirdItemBuyButton.setText("Buy for Driver");
        ThirdItemBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThirdItemBuyButtonActionPerformed(evt);
            }
        });

        ThirdItemTitleTextArea.setColumns(20);
        ThirdItemTitleTextArea.setRows(5);
        ThirdItemTitleScrollPane.setViewportView(ThirdItemTitleTextArea);

        ThirdItemImageURLLabel.setText("ImageURL");

        javax.swing.GroupLayout ThirdCatalogItemPanelLayout = new javax.swing.GroupLayout(ThirdCatalogItemPanel);
        ThirdCatalogItemPanel.setLayout(ThirdCatalogItemPanelLayout);
        ThirdCatalogItemPanelLayout.setHorizontalGroup(
            ThirdCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThirdCatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ThirdCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ThirdCatalogItemPanelLayout.createSequentialGroup()
                        .addGroup(ThirdCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ThirdItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ThirdItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ThirdCatalogItemPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(ThirdCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ThirdCatalogItemPanelLayout.createSequentialGroup()
                                .addComponent(ThirdItemImageURLLabel)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ThirdCatalogItemPanelLayout.createSequentialGroup()
                                .addComponent(ThirdItemPointCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ThirdCatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ThirdItemBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ThirdCatalogItemPanelLayout.setVerticalGroup(
            ThirdCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThirdCatalogItemPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(ThirdItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ThirdItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ThirdItemPointCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ThirdItemBuyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ThirdItemImageURLLabel)
                .addContainerGap())
        );

        FourthItemPointCostLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FourthItemPointCostLabel.setText("Point Price");

        FourthItemBuyButton.setText("Buy for Driver");
        FourthItemBuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourthItemBuyButtonActionPerformed(evt);
            }
        });

        FourthItemTitleTextArea.setColumns(20);
        FourthItemTitleTextArea.setRows(5);
        FourthItemTitleScrollPane.setViewportView(FourthItemTitleTextArea);

        FourthItemImageURLLabel.setText("ImageURL");

        javax.swing.GroupLayout FourthCatalogItemPanelLayout = new javax.swing.GroupLayout(FourthCatalogItemPanel);
        FourthCatalogItemPanel.setLayout(FourthCatalogItemPanelLayout);
        FourthCatalogItemPanelLayout.setHorizontalGroup(
            FourthCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FourthCatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FourthCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FourthCatalogItemPanelLayout.createSequentialGroup()
                        .addComponent(FourthItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(FourthCatalogItemPanelLayout.createSequentialGroup()
                        .addGroup(FourthCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(FourthItemPointCostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FourthItemTitleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FourthCatalogItemPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(FourthCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FourthCatalogItemPanelLayout.createSequentialGroup()
                                .addComponent(FourthItemImageURLLabel)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FourthCatalogItemPanelLayout.createSequentialGroup()
                                .addComponent(FourthItemBuyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        FourthCatalogItemPanelLayout.setVerticalGroup(
            FourthCatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FourthCatalogItemPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(FourthItemImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FourthItemTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FourthItemPointCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FourthItemBuyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FourthItemImageURLLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout CatalogItemPanelLayout = new javax.swing.GroupLayout(CatalogItemPanel);
        CatalogItemPanel.setLayout(CatalogItemPanelLayout);
        CatalogItemPanelLayout.setHorizontalGroup(
            CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CatalogItemPanelLayout.createSequentialGroup()
                .addGap(425, 425, 425)
                .addComponent(ThirdCatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FourthCatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CatalogItemPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(FirstCatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(SecondCatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(425, Short.MAX_VALUE)))
        );
        CatalogItemPanelLayout.setVerticalGroup(
            CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CatalogItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FourthCatalogItemPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ThirdCatalogItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CatalogItemPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(CatalogItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(FirstCatalogItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SecondCatalogItemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        PreviousCatalogButton.setText("Previous");
        PreviousCatalogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousCatalogButtonActionPerformed(evt);
            }
        });

        NextCatalogButton.setText("Next");
        NextCatalogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextCatalogButtonActionPerformed(evt);
            }
        });

        DriverUserCatalogList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DriverUserCatalogList.setToolTipText("");
        DriverUserCatalogList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                DriverUserCatalogListValueChanged(evt);
            }
        });
        DriverUserCatalogScrollPane.setViewportView(DriverUserCatalogList);

        ChangeDriverCatalogLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ChangeDriverCatalogLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChangeDriverCatalogLabel.setText("Change Driver");

        javax.swing.GroupLayout catalogLayout = new javax.swing.GroupLayout(catalog);
        catalog.setLayout(catalogLayout);
        catalogLayout.setHorizontalGroup(
            catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CatalogTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ChangeDriverCatalogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DriverUserCatalogScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(CatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(catalogLayout.createSequentialGroup()
                            .addComponent(PreviousCatalogButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(NextCatalogButton))))
                .addGap(159, 159, 159))
        );
        catalogLayout.setVerticalGroup(
            catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(CatalogTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChangeDriverCatalogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DriverUserCatalogScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CatalogItemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PreviousCatalogButton)
                    .addComponent(NextCatalogButton))
                .addGap(38, 38, 38))
        );

        layeredPane.add(catalog, "card4");

        catalogEditor.setBackground(new java.awt.Color(191, 192, 192));

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Update Point-to-Dollar Ratio for Drivers");

        jTextField4.setMinimumSize(new java.awt.Dimension(7, 30));
        jTextField4.setPreferredSize(new java.awt.Dimension(7, 30));
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ListingID", "Title", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Item Search Table for Company Catalog");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jTextField5.setMinimumSize(new java.awt.Dimension(7, 30));
        jTextField5.setPreferredSize(new java.awt.Dimension(7, 30));
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Price", "Quantity", "ItemID", "ImageURL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Current Company Catalog Items");
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("(No Spaces & Comma-separated) Keywords for Item Search");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jButton3.setText("Add Item to Catalog");
        jButton3.setMaximumSize(new java.awt.Dimension(170, 25));
        jButton3.setMinimumSize(new java.awt.Dimension(170, 25));
        jButton3.setPreferredSize(new java.awt.Dimension(170, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Remove Item from Catalog");
        jButton4.setActionCommand("Remove Item to Catalog");
        jButton4.setMaximumSize(new java.awt.Dimension(170, 25));
        jButton4.setMinimumSize(new java.awt.Dimension(170, 25));
        jButton4.setPreferredSize(new java.awt.Dimension(170, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout catalogEditorLayout = new javax.swing.GroupLayout(catalogEditor);
        catalogEditor.setLayout(catalogEditorLayout);
        catalogEditorLayout.setHorizontalGroup(
            catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogEditorLayout.createSequentialGroup()
                .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogEditorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(catalogEditorLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogEditorLayout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)))
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(catalogEditorLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(catalogEditorLayout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(catalogEditorLayout.createSequentialGroup()
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        catalogEditorLayout.setVerticalGroup(
            catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogEditorLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(catalogEditorLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(catalogEditorLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(14, 14, 14)
                        .addGroup(catalogEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(catalogEditorLayout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel21.getAccessibleContext().setAccessibleDescription("");

        layeredPane.add(catalogEditor, "card5");

        reporting.setBackground(new java.awt.Color(191, 192, 192));

        driverReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reportScrollPane.setViewportView(driverReportTable);

        filterLabel.setText("Add text to filter results or choose from dropdown list, then hit \"Filter Results\"");

        filterButton.setText("Filter Results");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reportingLayout = new javax.swing.GroupLayout(reporting);
        reporting.setLayout(reportingLayout);
        reportingLayout.setHorizontalGroup(
            reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportingLayout.createSequentialGroup()
                        .addGroup(reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reportScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE)
                            .addGroup(reportingLayout.createSequentialGroup()
                                .addComponent(filterLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(reportingLayout.createSequentialGroup()
                        .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(driverFilterDD, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))))
        );
        reportingLayout.setVerticalGroup(
            reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportingLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(filterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton)
                    .addComponent(driverFilterDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reportScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(231, Short.MAX_VALUE))
        );

        layeredPane.add(reporting, "card6");

        driverPoints.setBackground(new java.awt.Color(191, 192, 192));

        driverList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        driverList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                driverListValueChanged(evt);
            }
        });
        driverListScrollPane.setViewportView(driverList);

        submitPtChBtn.setText("Submit Point Change");
        submitPtChBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitPtChBtnActionPerformed(evt);
            }
        });

        driverListLabel.setText("Select driver from list:");

        pointChangeLabel.setText("Enter a point change value (Use \"-\" for point subtraction. (Ex. -200, 150))");

        reasonLabel.setText("Insert a brief reason for point change here:");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Driver Information");

        jLabel8.setText("First Name:");

        jLabel9.setText("Last Name:");

        jLabel10.setText("Preferred Name:");

        jLabel11.setText("Username:");

        updateDriverInfoButton.setText("Update");
        updateDriverInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDriverInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout driverPointsLayout = new javax.swing.GroupLayout(driverPoints);
        driverPoints.setLayout(driverPointsLayout);
        driverPointsLayout.setHorizontalGroup(
            driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(driverPointsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(driverPointsLayout.createSequentialGroup()
                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(driverListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1116, Short.MAX_VALUE)
                            .addGroup(driverPointsLayout.createSequentialGroup()
                                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(driverPointsLayout.createSequentialGroup()
                                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(submitPtChBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(driverListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reasonText, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reasonLabel))
                                        .addGap(236, 236, 236)
                                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel8)))
                                    .addComponent(pointChangeVal, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(driverFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverPreferredNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(driverPointsLayout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addComponent(updateDriverInfoButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(driverPointsLayout.createSequentialGroup()
                        .addComponent(pointChangeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(224, 224, 224))))
        );
        driverPointsLayout.setVerticalGroup(
            driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverPointsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(driverListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(driverPointsLayout.createSequentialGroup()
                        .addComponent(driverListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(driverPointsLayout.createSequentialGroup()
                                .addComponent(pointChangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pointChangeVal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverPointsLayout.createSequentialGroup()
                                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(driverFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverPointsLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(46, 46, 46)))
                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(driverPointsLayout.createSequentialGroup()
                        .addComponent(reasonLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reasonText))
                    .addGroup(driverPointsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(driverLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(driverPreferredNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(driverUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(0, 27, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(driverPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitPtChBtn)
                    .addComponent(updateDriverInfoButton))
                .addGap(35, 35, 35))
        );

        layeredPane.add(driverPoints, "card8");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reportingPanelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateDriverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SwitchtoDriverView, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateSponsorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(layeredPane)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton8)
                    .addComponent(jButton6)
                    .addComponent(reportingPanelBtn)
                    .addComponent(CreateDriverButton)
                    .addComponent(SwitchtoDriverView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23)
                    .addComponent(jButton7)
                    .addComponent(jButton28)
                    .addComponent(CreateSponsorButton))
                .addContainerGap(583, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(81, Short.MAX_VALUE)
                    .addComponent(layeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        SwitchtoDriverView.getAccessibleContext().setAccessibleName("SwitchtoDriverView");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    //Populate the driver table on reporting page with driver and point change information
    private void populateDriverTable(){
        DefaultTableModel model = (DefaultTableModel) driverReportTable.getModel();
        ArrayList<Integer> pointIDList = new ArrayList<>();
        ArrayList<Integer> pointChangeList = new ArrayList<>();
        ArrayList<Integer> driverIDList = new ArrayList<>();
        ArrayList<Integer> sponsorIDList = new ArrayList<>();
        ArrayList<String> reasonList = new ArrayList<>();
        ArrayList<Timestamp> tsList = new ArrayList<>();
        ArrayList<Integer> userIDList = new ArrayList<>();  //driver user IDs
        ArrayList<Integer> userIDList2 = new ArrayList<>(); //sponsor user IDs
        ArrayList<String> nameList = new ArrayList<>();     //driver names
        ArrayList<String> nameList2 = new ArrayList<>();    //sponsor names
        ArrayList<Integer> driverPointList = new ArrayList<>();
        
        
        //Querying db here to gather table information
        try{
            int compID = -1;
            int sponsorID = -1;
            int driverID = -1;
            int i = -1;
            
            //Get current sponsor's company ID
            PreparedStatement getUserPS = MyConnection.getConnection().prepareStatement("SELECT CompanyID, SponsorID FROM Sponsor WHERE UserID=?");
            getUserPS.setInt(1, userID);
            ResultSet sponsorRS = getUserPS.executeQuery();
            while(sponsorRS.next()){
                compID = sponsorRS.getInt("CompanyID");
                sponsorID = sponsorRS.getInt("SponsorID");
            }
            
            //Use company ID to query for driver IDs and driver points
            PreparedStatement driversPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PointChanges WHERE CompanyID=?");
            driversPS.setInt(1, compID);
            ResultSet driversRS = driversPS.executeQuery();
            while(driversRS.next()){
                int pointID = driversRS.getInt("PointChangeID");
                pointIDList.add(pointID);
                
                int pointChange = driversRS.getInt("PointChange");
                pointChangeList.add(pointChange);
                
                int driverPt = driversRS.getInt("PointTotal");
                driverPointList.add(driverPt);
                
                driverID = driversRS.getInt("DriverID");
                driverIDList.add(driverID);
                
                sponsorID = driversRS.getInt("SponsorID");
                sponsorIDList.add(sponsorID);
                
                String reason = driversRS.getString("Reason");
                reasonList.add(reason);
                
                Timestamp ts = driversRS.getTimestamp("PointChangeDate");
                tsList.add(ts);
            }
            
//            //Use company ID to query for driver IDs and driver points
//            PreparedStatement driversPtsPS = MyConnection.getConnection().prepareStatement("SELECT Points FROM DriverPoints WHERE CompanyID=?");
//            driversPtsPS.setInt(1, compID);
//            ResultSet driversPtsRS = driversPtsPS.executeQuery();
//            while(driversPtsRS.next()){
//                int driverPt = driversPtsRS.getInt("Points");
//                driverPointList.add(driverPt);
//            }
            
            //Use driver IDs to fetch user IDs
            PreparedStatement driversUserPS = MyConnection.getConnection().prepareStatement("SELECT UserID FROM Driver WHERE DriverID=?");
            for(int ID : driverIDList){
                driversUserPS.setInt(1, ID);
                ResultSet driverUserbyID = driversUserPS.executeQuery();
                while(driverUserbyID.next()){
                   int usrID = driverUserbyID.getInt("UserID");
                   userIDList.add(usrID);
                }
            }

            //Use sponsor IDs to fetch user IDs
            PreparedStatement sponsorsUserPS = MyConnection.getConnection().prepareStatement("SELECT UserID FROM Sponsor WHERE SponsorID=?");
            for(int ID : sponsorIDList){
                sponsorsUserPS.setInt(1, ID);
                ResultSet sponsorUserbyID = sponsorsUserPS.executeQuery();
                while(sponsorUserbyID.next()){
                   int usrID = sponsorUserbyID.getInt("UserID");
                   userIDList2.add(usrID);
                }
            }
            
            //Use user IDs to get names
            PreparedStatement getNamesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Users WHERE UserID=?");
            //Get driver names
            for(int ID : userIDList){
                getNamesPS.setInt(1, ID);
                ResultSet driverNamebyID = getNamesPS.executeQuery();
                while(driverNamebyID.next()){
                   String fName = driverNamebyID.getString("FirstName");
                   String lName = driverNamebyID.getString("LastName");
                   String fullName = fName + " " + lName;
                   nameList.add(fullName);
                }
            }
            //Get sponsor names
            for(int ID : userIDList2){
                getNamesPS.setInt(1, ID);
                ResultSet sponsorNameByID = getNamesPS.executeQuery();
                while(sponsorNameByID.next ()){
                    String fName = sponsorNameByID.getString("FirstName");
                    String lName = sponsorNameByID.getString("LastName");
                    String fullName = fName + " " + lName;
                    nameList2.add(fullName);
                }
            }
        
            //Populate drop down list
            driverFilterDD.addItem("All Drivers");
            Set<String> nameSet = new HashSet<String>(nameList);
            Iterator<String> iterator = nameSet.iterator();
            for(int x = 0; x < nameSet.size(); ++x){
                String name = iterator.next();
                driverFilterDD.addItem(name);
            }
            
            int numOfColumns = 6;
            int numOfRows = pointIDList.size();
            Object[] columnsName = new Object[numOfColumns];
            columnsName[0] = "DriverName";
            columnsName[1] = "TotalPoints";
            columnsName[2] = "PointChange";
            columnsName[3] = "DatePointChange";
            columnsName[4] = "SponsorName";
            columnsName[5] = "Reason";
            
            model.setColumnIdentifiers(columnsName);
            
            Object[] rowData = new Object[numOfColumns];
            
            for(int j = 0; j < numOfRows; ++j){
                rowData[0] = nameList.get(j);
                rowData[1] = driverPointList.get(j);
                rowData[2] = pointChangeList.get(j);
                rowData[3] = tsList.get(j);
                rowData[4] = nameList2.get(j);
                rowData[5] = reasonList.get(j);
                
                model.addRow(rowData);
            }
            
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }
    
    //Populate the driver list on driver points panel
    private void populateDriverList(){
        ArrayList<String> listDataArrayList = new ArrayList<>();
        ArrayList<Integer> driverIDList = new ArrayList<>();
        Set<Integer> userIDList = new HashSet<>();
        ArrayList<Integer> driverPointList = new ArrayList<>();
        try{
            int compID = -1;
            int driverID = -1;
            int i = 0;
            //Get current sponsor's company ID
            PreparedStatement getUserPS = MyConnection.getConnection().prepareStatement("SELECT CompanyID FROM Sponsor WHERE UserID=?");
            getUserPS.setInt(1, userID);
            ResultSet sponsorRS = getUserPS.executeQuery();
            while(sponsorRS.next()){
                compID = sponsorRS.getInt("CompanyID");
            }
            
            //Use company ID to query for driver IDs and driver points
            PreparedStatement driversPS = MyConnection.getConnection().prepareStatement("SELECT DriverID, Points FROM DriverPoints WHERE CompanyID=?");
            driversPS.setInt(1, compID);
            ResultSet driversRS = driversPS.executeQuery();
            while(driversRS.next()){
                driverID = driversRS.getInt("DriverID");
                driverIDList.add(driverID);
                int driverPt = driversRS.getInt("Points");
                driverPointList.add(driverPt);
            }
            
            //Use driver IDs to fetch user IDs
            PreparedStatement driversUserPS = MyConnection.getConnection().prepareStatement("SELECT UserID FROM Driver WHERE DriverID=?");
            for(int ID : driverIDList){
                driversUserPS.setInt(1, ID);
                ResultSet driverUserbyID = driversUserPS.executeQuery();
                while(driverUserbyID.next()){
                   int usrID = driverUserbyID.getInt("UserID");
                   userIDList.add(usrID);
                }
            }
            
            //User user IDS to fetch driver names and populate list
            PreparedStatement driversNamesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Users WHERE UserID=?");
            for(int ID : userIDList){
                driversNamesPS.setInt(1, ID);
                ResultSet driverNamebyID = driversNamesPS.executeQuery();
                while(driverNamebyID.next()){
                   String fName = driverNamebyID.getString("FirstName");
                   String lName = driverNamebyID.getString("LastName");
                   String username = driverNamebyID.getString("Username");
                   String fullName = fName + " " + lName + " (" + username + ")";
                   String listItems = driverIDList.get(i) + ": " + fullName + ": " + driverPointList.get(i);
                   listDataArrayList.add(listItems);
                }
                ++i;
            }
            String[] listData = listDataArrayList.toArray(new String[listDataArrayList.size()]);
            driverList.setListData(listData);
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Logout button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Redirect to login frame
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setTitle("Good Driver Incentive Program - Login");
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        switchPanels(catalogEditor);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        switchPanels(myAccount);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
        switchPanels(driverPoints);
        populateDriverList();
    }//GEN-LAST:event_jButton28ActionPerformed

    private void reportingPanelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportingPanelBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(reporting);
        populateDriverTable();
    }//GEN-LAST:event_reportingPanelBtnActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    //Preferred Name Update Button
    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        String newPreferredName = jTextField3.getText();
        try {
            PreparedStatement preferredNameSelectPS;
            ResultSet preferredNameSelectRS;
            String preferredNameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
            preferredNameSelectPS = MyConnection.getConnection().prepareStatement(preferredNameSelectQuery);
            preferredNameSelectPS.setInt(1, this.getUserID());
            preferredNameSelectRS = preferredNameSelectPS.executeQuery();
            if(preferredNameSelectRS.next()) {
                String oldPreferredName = preferredNameSelectRS.getString("PreferredName");
                //If new preferred name is same as old, don't update database
                if(newPreferredName.equals(oldPreferredName)) {
                    JOptionPane.showMessageDialog(null, "New preferred name is the same as your old preferred name.");
                } else {
                    //Update database to have new preferred name
                    PreparedStatement updatePreferredNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET PreferredName=? WHERE UserID=?");
                    updatePreferredNamePreparedStatement.setString(1, newPreferredName);
                    updatePreferredNamePreparedStatement.setInt(2, this.getUserID());
                    updatePreferredNamePreparedStatement.executeUpdate();
                    this.setSponsorPreferredName(newPreferredName);
                }
            }
        } catch(SQLException e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton26ActionPerformed

    //Password Update Button
    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        String newPassword = jPasswordField1.getText();
        //Check for valid password using regex
        //https://www.geeksforgeeks.org/how-to-validate-a-password-using-regular-expressions-in-java/
        String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,20}$"; 
        Pattern passwordPattern = Pattern.compile(passwordRegex);
        Matcher passwordMatcher = passwordPattern.matcher(newPassword);
        if(!passwordMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Password must be 8-20 characters, have one uppercase, one lowercase, one digit, one special character, and no white space.");
        } else {
            //If password does match criteria, get the user's current password
            try {
                PreparedStatement passwordSelectPS;
                ResultSet passwordSelectRS;
                String passwordSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                passwordSelectPS = MyConnection.getConnection().prepareStatement(passwordSelectQuery);
                passwordSelectPS.setInt(1, this.getUserID());
                passwordSelectRS = passwordSelectPS.executeQuery();
                if(passwordSelectRS.next()) {
                    String oldPassword = passwordSelectRS.getString("UserPassword");
                    //If new password is same as old, don't update database
                    if(BCrypt.checkpw(newPassword, oldPassword)) {
                        JOptionPane.showMessageDialog(null, "New password is the same as your old password.");
                    } else {
                        //Update database to have new password
                        PreparedStatement updatePasswordPreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET UserPassword=? WHERE UserID=?");
                        String pw_hash = BCrypt.hashpw(newPassword, BCrypt.gensalt());
                        updatePasswordPreparedStatement.setString(1, pw_hash);
                        updatePasswordPreparedStatement.setInt(2, this.getUserID());
                        updatePasswordPreparedStatement.executeUpdate();
                        this.setSponsorPassword(newPassword);
                        //Record password change for audit loging
                        PreparedStatement passwordChangePS = MyConnection.getConnection().prepareStatement("INSERT INTO PasswordChange (PasswordChangeDate, PasswordChangeType, UserChangedID, UserChangingID) VALUES (CURRENT_TIMESTAMP, ?, ?, ?)");
                        passwordChangePS.setString(1, "change from profile - self change");
                        passwordChangePS.setInt(2, this.getUserID());
                        passwordChangePS.setInt(3, this.getUserID());
                        passwordChangePS.executeUpdate();
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        switchPanels(myApplication);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        switchPanels(catalog);
    }//GEN-LAST:event_jButton9ActionPerformed

    //Name Update Button
    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        String newName = jTextField1.getText();
        if(newName.replaceAll(" ", "").equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
        } else {
            String[] splitName = newName.split(" ");
            //Check if all names were entered
            if(splitName.length != 3) {
                JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
            } else {
                try {
                    String newFirstName = splitName[0];
                    String newMiddleName = splitName[1];
                    String newLastName = splitName[2];
                    PreparedStatement nameSelectPS;
                    ResultSet nameSelectRS;
                    String nameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                    nameSelectPS = MyConnection.getConnection().prepareStatement(nameSelectQuery);
                    nameSelectPS.setInt(1, this.getUserID());
                    nameSelectRS = nameSelectPS.executeQuery();
                    if(nameSelectRS.next()) {
                        //Update the database to have the three new names
                        PreparedStatement updateFirstNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET FirstName=? WHERE UserID=?");
                        updateFirstNamePreparedStatement.setString(1, newFirstName);
                        updateFirstNamePreparedStatement.setInt(2, this.getUserID());
                        PreparedStatement updateMiddleNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET MiddleName=? WHERE UserID=?");
                        updateMiddleNamePreparedStatement.setString(1, newMiddleName);
                        updateMiddleNamePreparedStatement.setInt(2, this.getUserID());
                        PreparedStatement updateLastNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET LastName=? WHERE UserID=?");
                        updateLastNamePreparedStatement.setString(1, newLastName);
                        updateLastNamePreparedStatement.setInt(2, this.getUserID());
                        updateFirstNamePreparedStatement.executeUpdate();
                        updateMiddleNamePreparedStatement.executeUpdate();
                        updateLastNamePreparedStatement.executeUpdate();
                        this.setSponsorName(newName);
                    }
                } catch(SQLException e) {
                    Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    //Username Update Button
    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        String newUsername = jTextField2.getText();
        //Check for valid username using regex (email)
        //https://howtodoinjava.com/java/regex/java-regex-validate-email-address/
        String usernameRegex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        Pattern usernamePattern = Pattern.compile(usernameRegex);
        Matcher usernameMatcher = usernamePattern.matcher(newUsername);
        if(!usernameMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please enter a valid username.", "Username Invalid", 2);
        } else {
            //If username does match criteria, get the user's current username
            try {
                PreparedStatement usernameSelectPS;
                ResultSet usernameSelectRS;
                String usernameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                usernameSelectPS = MyConnection.getConnection().prepareStatement(usernameSelectQuery);
                usernameSelectPS.setInt(1, this.getUserID());
                usernameSelectRS = usernameSelectPS.executeQuery();
                if(usernameSelectRS.next()) {
                    String oldUsername = usernameSelectRS.getString("Username");
                    //If new username is same as old, don't update database
                    if(newUsername.equals(oldUsername)) {
                        JOptionPane.showMessageDialog(null, "New username is the same as your old username.");
                    } else {
                        //See if username is already in-use
                        PreparedStatement usernameCheckPS;
                        ResultSet usernameCheckRS;
                        String usernameCheckQuery = "SELECT * FROM Users WHERE Username=?";
                        usernameCheckPS = MyConnection.getConnection().prepareStatement(usernameCheckQuery);
                        usernameCheckPS.setString(1, newUsername);
                        usernameCheckRS = usernameCheckPS.executeQuery();
                        //If new username is already being used by another account, don't update database
                        if(usernameCheckRS.next()) {
                            JOptionPane.showMessageDialog(null, "Username already in use by another account.");
                        } else {
                            //Update database to have new username
                            PreparedStatement updateUsernamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET Username=? WHERE UserID=?");
                            updateUsernamePreparedStatement.setString(1, newUsername);
                            updateUsernamePreparedStatement.setInt(2, this.getUserID());
                            updateUsernamePreparedStatement.executeUpdate();
                            this.setSponsorUsername(newUsername);
                        }
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    //Remove item from company catalog button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //If item was selected from the catalog table and not the search table, remove it from the company catalog
        if(!getSearchTableSelected() && getCatalogTableSelected()) {
            //Get the item information from the jTable row selected
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            int selectedRow = jTable3.getSelectedRow();
            int itemID = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());
            try {
                //Get companyID from sponsor
                PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
                sponsorPS.setInt(1, this.getUserID());
                ResultSet sponsorRS = sponsorPS.executeQuery();
                //If sponsor was found in database
                if(sponsorRS.next()) {
                    int companyID = sponsorRS.getInt("CompanyID");
                    PreparedStatement catalogItemRemovalPS = MyConnection.getConnection().prepareStatement("UPDATE CatalogItems SET Removed=? WHERE ItemID=?");
                    catalogItemRemovalPS.setBoolean(1, true);
                    catalogItemRemovalPS.setInt(2, itemID);
                    catalogItemRemovalPS.executeUpdate();
                    //Update catalog item table
                    updateCatalogItemTable();
                }
            } catch(SQLException e) {
                Logger.getLogger(CatalogInformation.class.getName()).log(Level.SEVERE, null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot remove an item that isn't already in your catalog.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //Add item to company catalog button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //If item was selected from the search table and not the catalog table, add it to the company catalog
        if(getSearchTableSelected() && !getCatalogTableSelected()) {
            //Get the item information from the jTable row selected
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();
            String listingID = model.getValueAt(selectedRow, 0).toString();
            String title = model.getValueAt(selectedRow, 1).toString();
            double price = (double) model.getValueAt(selectedRow, 2);
            price = Math.round(price * 100.0) / 100.0;
            String imageURL = getLastImageURL();
            int quantity = (int) model.getValueAt(selectedRow, 3);
            try {
                //Get companyID from sponsor
                PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
                sponsorPS.setInt(1, this.getUserID());
                ResultSet sponsorRS = sponsorPS.executeQuery();
                //If sponsor was found in database
                if(sponsorRS.next()) {
                    int companyID = sponsorRS.getInt("CompanyID");
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("INSERT INTO CatalogItems (CompanyID, Price, ItemDescription, ItemImage, Quantity, ListingID, Removed) VALUES (?, ?, ?, ?, ?, ?, ?)");
                    catalogItemPS.setInt(1, companyID);
                    catalogItemPS.setDouble(2, price);
                    catalogItemPS.setString(3, title);
                    catalogItemPS.setString(4, imageURL);
                    catalogItemPS.setInt(5, quantity);
                    catalogItemPS.setString(6, listingID);
                    catalogItemPS.setBoolean(7, false);
                    catalogItemPS.executeUpdate();
                    //Update catalog item table
                    updateCatalogItemTable();
                }
            } catch(SQLException e) {
                Logger.getLogger(CatalogInformation.class.getName()).log(Level.SEVERE, null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot add an item that isn't from the search table.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Company catalog item row selected
    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        setSearchTableSelected(false);
        setCatalogTableSelected(true);
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        int selectedRow = jTable3.getSelectedRow();
        String title = "Title:\n" + model.getValueAt(selectedRow, 0).toString() + "\n\n";
        String price = "Price:\n$" + String.format("%.2f", model.getValueAt(selectedRow, 1)) + "\n\n";
        //Default ratio
        int pointToDollarConversion = 100;
        //Query database for company's point to dollar conversion ratio
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
            sponsorPS.setInt(1, this.getUserID());
            ResultSet sponsorRS = sponsorPS.executeQuery();
            if(sponsorRS.next()) {
                int companyID = sponsorRS.getInt("CompanyID");
                PreparedStatement pointToDollarConversionPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                pointToDollarConversionPS.setInt(1, companyID);
                ResultSet pointToDollarConversionRS = pointToDollarConversionPS.executeQuery();
                if(pointToDollarConversionRS.next()) {
                    pointToDollarConversion = pointToDollarConversionRS.getInt("PointToDollar");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        double pointCost = Double.parseDouble(model.getValueAt(selectedRow, 1).toString()) * pointToDollarConversion;
        int roundedCost = (int) pointCost;
        String pointValue = "Point Cost for Drivers:\n" + roundedCost + "\n\n";
        String quantity = "Quantity:\n" + model.getValueAt(selectedRow, 2).toString();
        //Update jTextArea with information from selected item
        jTextArea1.setText(title + price + pointValue + quantity);
        //Get Image URL from database to display
        String imageURL = model.getValueAt(selectedRow, 4).toString();
        try {
            URL url = new URL(imageURL);
            Image image = ImageIO.read(url);
            jLabel21.setIcon(new ImageIcon(image));
        } catch (Exception ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable3MouseClicked

    //Submit keyword search on Etsy button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String keywords = jTextField5.getText();
        String etsyQuery;
        //If the sponsor provided keywords for the search
        if(keywords.equals("")) {
            etsyQuery = "https://openapi.etsy.com/v2/listings/active?api_key=pzm9kr33wye2gmv9fy2h4g64&limit="+getItemRequestLimit();
        } else {
            etsyQuery = "https://openapi.etsy.com/v2/listings/active?api_key=pzm9kr33wye2gmv9fy2h4g64&keywords=" + keywords + "&limit="+getItemRequestLimit();
        }
        //Send the request to etsy for listing results back
        try {
            HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(etsyQuery))
            .method("GET", HttpRequest.BodyPublishers.noBody())
            .build();
            HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
            JSONObject jsonResponse = new JSONObject(response.body());

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            //Clear all rows from previous search if necessary
            if(dtm.getRowCount() > 0) {
                for(int i = dtm.getRowCount()-1; i >= 0; i--) {
                    dtm.removeRow(i);
                }
            }
            //Add each listing as a row to the table
            for(int i = 0; i < jsonResponse.getJSONArray("results").length(); i++) {
                int listingID = jsonResponse.getJSONArray("results").getJSONObject(i).getInt("listing_id");
                String title = jsonResponse.getJSONArray("results").getJSONObject(i).getString("title");
                title = title.replaceAll("&#39;", "\'");
                title = title.replaceAll("&quot;","\"");
                double price = Double.parseDouble(jsonResponse.getJSONArray("results").getJSONObject(i).getString("price"));
                int quantity = jsonResponse.getJSONArray("results").getJSONObject(i).getInt("quantity");
                Object[] rowData = {listingID, title, price, quantity};
                dtm.addRow(rowData);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue with query: please be sure keywords are spelled correctly, comma-separated, and contain no white space.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    //New search item row selected event
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        setSearchTableSelected(true);
        setCatalogTableSelected(false);
        //Get the item information from the jTable row selected
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        String title = "Title:\n" + model.getValueAt(selectedRow, 1).toString() + "\n\n";
        String price = "Price:\n$" + String.format("%.2f", model.getValueAt(selectedRow, 2)) + "\n\n";
        //Default ratio
        int pointToDollarConversion = 100;
        //Query database for company's point to dollar conversion ratio
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
            sponsorPS.setInt(1, this.getUserID());
            ResultSet sponsorRS = sponsorPS.executeQuery();
            if(sponsorRS.next()) {
                int companyID = sponsorRS.getInt("CompanyID");
                PreparedStatement pointToDollarConversionPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                pointToDollarConversionPS.setInt(1, companyID);
                ResultSet pointToDollarConversionRS = pointToDollarConversionPS.executeQuery();
                if(pointToDollarConversionRS.next()) {
                    pointToDollarConversion = pointToDollarConversionRS.getInt("PointToDollar");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        double pointCost = Double.parseDouble(model.getValueAt(selectedRow, 2).toString()) * pointToDollarConversion;
        int roundedCost = (int) pointCost;
        String pointValue = "Point Cost for Drivers:\n" + roundedCost + "\n\n";
        String quantity = "Quantity:\n" + model.getValueAt(selectedRow, 3).toString();
        //Update jTextArea with information from selected item
        jTextArea1.setText(title + price + pointValue + quantity);
        //Get Image URL from Etsy to display
        try {
            int listingID = (int) model.getValueAt(selectedRow, 0);
            HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://openapi.etsy.com/v2/listings/" + listingID + "/images?api_key=pzm9kr33wye2gmv9fy2h4g64"))
            .method("GET", HttpRequest.BodyPublishers.noBody())
            .build();
            HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
            JSONObject jsonResponse = new JSONObject(response.body());
            setLastImageURL(jsonResponse.getJSONArray("results").getJSONObject(0).getString("url_170x135"));
            URL url = new URL(getLastImageURL());
            Image image = ImageIO.read(url);
            jLabel21.setIcon(new ImageIcon(image));
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Issue with query: problem getting the image URL.");
        }
    }//GEN-LAST:event_jTable1MouseClicked

    //Update Point to Dollar Ratio button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int newPointToDollarRatio = Integer.parseInt(jTextField4.getText());
        int oldPointToDollarRatio;
        //Query database for company's point to dollar conversion ratio
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
            sponsorPS.setInt(1, this.getUserID());
            ResultSet sponsorRS = sponsorPS.executeQuery();
            //If sponsor was found in database with user sponsor ID
            if(sponsorRS.next()) {
                //Get the company point to dollar conversion using sponsor's CompanyID
                int companyID = sponsorRS.getInt("CompanyID");
                PreparedStatement pointToDollarConversionPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                pointToDollarConversionPS.setInt(1, companyID);
                ResultSet pointToDollarConversionRS = pointToDollarConversionPS.executeQuery();
                //If point to dollar ratio was found for that CompanyID
                if(pointToDollarConversionRS.next()) {
                    oldPointToDollarRatio = pointToDollarConversionRS.getInt("PointToDollar");
                    //If the new ratio is the same as old, don't update
                    if(newPointToDollarRatio == oldPointToDollarRatio) {
                        JOptionPane.showMessageDialog(null, "Company point to dollar ratio is already " + newPointToDollarRatio + " points per dollar.");
                    } else {
                        //Update Company with new point to dollar ratio
                        PreparedStatement pointToDollarConversionUpdatePS = MyConnection.getConnection().prepareStatement("UPDATE Company SET PointToDollar=? WHERE CompanyID=?");
                        pointToDollarConversionUpdatePS.setInt(1, newPointToDollarRatio);
                        pointToDollarConversionUpdatePS.setInt(2, companyID);
                        pointToDollarConversionUpdatePS.executeUpdate();
                        setCompanyPointToDollarRatio(String.valueOf(newPointToDollarRatio));
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void submitPtChBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitPtChBtnActionPerformed
        //Parse selected value string to get individual data
        String selectedVal = driverList.getSelectedValue();
        String reasonVal = reasonText.getText();
        int changeVal = 0;
        
        //Check if point change value is valid
        try{
            changeVal = Integer.parseInt(pointChangeVal.getText());
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Please enter a valid integer number for point change value!");
        }
        
        //Check if driver list selection is empty, stop if so
        //Check if reason text field is empty, stop if so
        if(selectedVal == null || reasonVal.equals("")){
            JOptionPane.showMessageDialog(null, "Please make sure a driver is selected and a reason has been provided!");
        }
        else{
            //Success! Driver selected and reason provided
            String[] vals = selectedVal.split(": ", 5);
            String selectedDrvrID = vals[0];
            String selectedName = vals[1];
            String selectedPts = vals[2];
            int driverIDInt = Integer.parseInt(selectedDrvrID);
            int totalPoints = Integer.parseInt(selectedPts);
            totalPoints += changeVal;
            
            try{
                //Insert updated point value for specified driver with reason
                int compID = 0;
                int sponsorID = 0;
                PreparedStatement getUserPS = MyConnection.getConnection().prepareStatement("SELECT CompanyID, SponsorID FROM Sponsor WHERE UserID=?");
                getUserPS.setInt(1, userID);
                ResultSet sponsorRS = getUserPS.executeQuery();
                while(sponsorRS.next()){
                    compID = sponsorRS.getInt("CompanyID");
                    sponsorID = sponsorRS.getInt("SponsorID");
                }

                PreparedStatement changePointsPS = MyConnection.getConnection().prepareStatement("INSERT INTO PointChanges (PointChange, PointTotal, DriverID, SponsorID, CompanyID, Reason, PointChangeDate) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)");
                changePointsPS.setInt(1, changeVal);
                changePointsPS.setInt(2, totalPoints);
                changePointsPS.setInt(3, driverIDInt);
                changePointsPS.setInt(4, sponsorID);
                changePointsPS.setInt(5, compID);
                changePointsPS.setString(6, reasonVal);
                changePointsPS.executeUpdate();
                
            }
            catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
            }
            
            reasonText.setText("");
            pointChangeVal.setText("");
            driverList.clearSelection();
            populateDriverList();
        }
    }//GEN-LAST:event_submitPtChBtnActionPerformed

    private void approveApplicationButtonAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_approveApplicationButtonAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_approveApplicationButtonAncestorAdded

    private void approveApplicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveApplicationButtonActionPerformed
        try {
            if(applicationTable.getSelectedRow() != -1 && !reasonTextField.getText().equals("")) {
                int row = applicationTable.getSelectedRow();
                if(applicationTable.getModel().getValueAt(row, 4).equals("Pending")) {
                    PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("UPDATE DriverApplications SET Reason=?, ApplicationStatus=? WHERE DriverApplicationID=?");
                    sponsorPS.setString(1, reasonTextField.getText());
                    sponsorPS.setString(2, "Approved");
                    sponsorPS.setInt(3, Integer.parseInt(applicationTable.getModel().getValueAt(row, 0).toString()));
                    sponsorPS.executeUpdate();

                    PreparedStatement sponsorPS2 = MyConnection.getConnection().prepareStatement("INSERT INTO DriverPoints (DriverID, CompanyID, Points) VALUES (?, ?, 0)");
                    PreparedStatement applicationPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverApplications WHERE DriverApplicationID=?");
                    applicationPS.setInt(1, Integer.parseInt(applicationTable.getModel().getValueAt(row, 0).toString()));
                    ResultSet applicationRS = applicationPS.executeQuery();
                    if(applicationRS.next()) {
                        sponsorPS2.setInt(1, applicationRS.getInt("DriverID"));
                        sponsorPS2.setInt(2, applicationRS.getInt("CompanyID"));
                        sponsorPS2.executeUpdate();
                        setDriverApplicationTable();
                        reasonTextField.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "This application has already been accepted or denied.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please make sure an application is accepted and a reason is given.");
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }//GEN-LAST:event_approveApplicationButtonActionPerformed

    
    private void declineApplicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineApplicationButtonActionPerformed
        try {
            if(applicationTable.getSelectedRow() != -1 && !reasonTextField.getText().equals("")) {
                int row = applicationTable.getSelectedRow();
                if(applicationTable.getModel().getValueAt(row, 4).equals("Pending")) {
                    PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("UPDATE DriverApplications SET Reason=?, ApplicationStatus=? WHERE DriverApplicationID=?");
                    sponsorPS.setString(1, reasonTextField.getText());
                    sponsorPS.setString(2, "Declined");
                    sponsorPS.setInt(3, Integer.parseInt(applicationTable.getModel().getValueAt(row, 0).toString()));
                    sponsorPS.executeUpdate();
                    setDriverApplicationTable();
                    reasonTextField.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "This application has already been accepted or denied.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please make sure an application is accepted and a reason is given.");
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_declineApplicationButtonActionPerformed

    private void CreateDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDriverButtonActionPerformed
        CreateAccount createAccountFrame = new CreateAccount();
        createAccountFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAccountFrame.setTitle("Good Driver Incentive Program - Create Driver Account");
        createAccountFrame.setVisible(true);
    }//GEN-LAST:event_CreateDriverButtonActionPerformed

    private void FirstItemBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstItemBuyButtonActionPerformed
        try {
            if(currentCatalogDriverSelected != 0) {  
                //Get item information
                String title = FirstItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                //Get driver information
                int driverID = getCurrentCatalogDriver();
                //Check if item is available
                PreparedStatement listingPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE ItemID=?");
                listingPS.setInt(1, itemID);
                ResultSet listingRS = listingPS.executeQuery();
                if(listingRS.next()) {
                    int listingID = listingRS.getInt("ListingID");
                    //Query Etsy to make sure listing is still active (not sold out)
                    String etsyQuery = "https://openapi.etsy.com/v2/listings/" + listingID + "?api_key=pzm9kr33wye2gmv9fy2h4g64";
                    //Send the request to etsy for listing results back
                    HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(etsyQuery))
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
                    HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
                    JSONObject jsonResponse = new JSONObject(response.body());
                    //Tell user listing is not active and to remove item from cart based on Etsy results
                    String listingState = jsonResponse.getJSONArray("results").getJSONObject(0).getString("state");
                    if(listingState.equals("active")) {
                        //Check if driver can afford item
                        PreparedStatement driverPointsPS = MyConnection.getConnection().prepareStatement("SELECT DriverPoints.Points, Company.PointToDollar, Company.CompanyID FROM DriverPoints JOIN Sponsor ON Sponsor.CompanyID=DriverPoints.CompanyID JOIN Company ON Sponsor.CompanyID=Company.CompanyID WHERE DriverID=? AND Sponsor.UserID=?");
                        driverPointsPS.setInt(1, driverID);
                        driverPointsPS.setInt(2, userID);
                        ResultSet driverPointsRS = driverPointsPS.executeQuery();
                        if(driverPointsRS.next()) {
                            double price = listingRS.getDouble("Price");
                            int pointToDollar = driverPointsRS.getInt("PointToDollar");
                            double pointCost = price * pointToDollar;
                            int roundedCost = (int) pointCost;
                            if(driverPointsRS.getInt("Points") >= roundedCost) {
                                //Add to purchase table
                                PreparedStatement catalogPurchasePS = MyConnection.getConnection().prepareStatement("INSERT INTO CatalogPurchases (PointCost, MonetaryCost, DriverID, CompanyID, ItemID, PurchaseDate) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)");
                                catalogPurchasePS.setInt(1, roundedCost);
                                catalogPurchasePS.setDouble(2, price);
                                catalogPurchasePS.setInt(3, driverID);
                                catalogPurchasePS.setInt(4, driverPointsRS.getInt("CompanyID"));
                                catalogPurchasePS.setInt(5, itemID);
                                catalogPurchasePS.executeUpdate();
                                currentCatalogDriverSelected = 0;
                            } else {
                                JOptionPane.showMessageDialog(null, "This driver cannot afford the item with their current point total.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Item is no longer an active listing, please remove it from your catalog.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a driver to make a purchase.");
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_FirstItemBuyButtonActionPerformed

    private void SecondItemBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecondItemBuyButtonActionPerformed
        try {
            if(currentCatalogDriverSelected != 0) {  
                //Get item information
                String title = SecondItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                //Get driver information
                int driverID = getCurrentCatalogDriver();
                //Check if item is available
                PreparedStatement listingPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE ItemID=?");
                listingPS.setInt(1, itemID);
                ResultSet listingRS = listingPS.executeQuery();
                if(listingRS.next()) {
                    int listingID = listingRS.getInt("ListingID");
                    //Query Etsy to make sure listing is still active (not sold out)
                    String etsyQuery = "https://openapi.etsy.com/v2/listings/" + listingID + "?api_key=pzm9kr33wye2gmv9fy2h4g64";
                    //Send the request to etsy for listing results back
                    HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(etsyQuery))
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
                    HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
                    JSONObject jsonResponse = new JSONObject(response.body());
                    //Tell user listing is not active and to remove item from cart based on Etsy results
                    String listingState = jsonResponse.getJSONArray("results").getJSONObject(0).getString("state");
                    if(listingState.equals("active")) {
                        //Check if driver can afford item
                        PreparedStatement driverPointsPS = MyConnection.getConnection().prepareStatement("SELECT DriverPoints.Points, Company.PointToDollar, Company.CompanyID FROM DriverPoints JOIN Sponsor ON Sponsor.CompanyID=DriverPoints.CompanyID JOIN Company ON Sponsor.CompanyID=Company.CompanyID WHERE DriverID=? AND Sponsor.UserID=?");
                        driverPointsPS.setInt(1, driverID);
                        driverPointsPS.setInt(2, userID);
                        ResultSet driverPointsRS = driverPointsPS.executeQuery();
                        if(driverPointsRS.next()) {
                            double price = listingRS.getDouble("Price");
                            int pointToDollar = driverPointsRS.getInt("PointToDollar");
                            double pointCost = price * pointToDollar;
                            int roundedCost = (int) pointCost;
                            if(driverPointsRS.getInt("Points") >= roundedCost) {
                                //Add to purchase table
                                PreparedStatement catalogPurchasePS = MyConnection.getConnection().prepareStatement("INSERT INTO CatalogPurchases (PointCost, MonetaryCost, DriverID, CompanyID, ItemID, PurchaseDate) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)");
                                catalogPurchasePS.setInt(1, roundedCost);
                                catalogPurchasePS.setDouble(2, price);
                                catalogPurchasePS.setInt(3, driverID);
                                catalogPurchasePS.setInt(4, driverPointsRS.getInt("CompanyID"));
                                catalogPurchasePS.setInt(5, itemID);
                                catalogPurchasePS.executeUpdate();
                                currentCatalogDriverSelected = 0;
                            } else {
                                JOptionPane.showMessageDialog(null, "This driver cannot afford the item with their current point total.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Item is no longer an active listing, please remove it from your catalog.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a driver to make a purchase.");
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_SecondItemBuyButtonActionPerformed

    private void ThirdItemBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThirdItemBuyButtonActionPerformed
        try {
            if(currentCatalogDriverSelected != 0) {  
                //Get item information
                String title = ThirdItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                //Get driver information
                int driverID = getCurrentCatalogDriver();
                //Check if item is available
                PreparedStatement listingPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE ItemID=?");
                listingPS.setInt(1, itemID);
                ResultSet listingRS = listingPS.executeQuery();
                if(listingRS.next()) {
                    int listingID = listingRS.getInt("ListingID");
                    //Query Etsy to make sure listing is still active (not sold out)
                    String etsyQuery = "https://openapi.etsy.com/v2/listings/" + listingID + "?api_key=pzm9kr33wye2gmv9fy2h4g64";
                    //Send the request to etsy for listing results back
                    HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(etsyQuery))
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
                    HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
                    JSONObject jsonResponse = new JSONObject(response.body());
                    //Tell user listing is not active and to remove item from cart based on Etsy results
                    String listingState = jsonResponse.getJSONArray("results").getJSONObject(0).getString("state");
                    if(listingState.equals("active")) {
                        //Check if driver can afford item
                        PreparedStatement driverPointsPS = MyConnection.getConnection().prepareStatement("SELECT DriverPoints.Points, Company.PointToDollar, Company.CompanyID FROM DriverPoints JOIN Sponsor ON Sponsor.CompanyID=DriverPoints.CompanyID JOIN Company ON Sponsor.CompanyID=Company.CompanyID WHERE DriverID=? AND Sponsor.UserID=?");
                        driverPointsPS.setInt(1, driverID);
                        driverPointsPS.setInt(2, userID);
                        ResultSet driverPointsRS = driverPointsPS.executeQuery();
                        if(driverPointsRS.next()) {
                            double price = listingRS.getDouble("Price");
                            int pointToDollar = driverPointsRS.getInt("PointToDollar");
                            double pointCost = price * pointToDollar;
                            int roundedCost = (int) pointCost;
                            if(driverPointsRS.getInt("Points") >= roundedCost) {
                                //Add to purchase table
                                PreparedStatement catalogPurchasePS = MyConnection.getConnection().prepareStatement("INSERT INTO CatalogPurchases (PointCost, MonetaryCost, DriverID, CompanyID, ItemID, PurchaseDate) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)");
                                catalogPurchasePS.setInt(1, roundedCost);
                                catalogPurchasePS.setDouble(2, price);
                                catalogPurchasePS.setInt(3, driverID);
                                catalogPurchasePS.setInt(4, driverPointsRS.getInt("CompanyID"));
                                catalogPurchasePS.setInt(5, itemID);
                                catalogPurchasePS.executeUpdate();
                                currentCatalogDriverSelected = 0;
                            } else {
                                JOptionPane.showMessageDialog(null, "This driver cannot afford the item with their current point total.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Item is no longer an active listing, please remove it from your catalog.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a driver to make a purchase.");
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_ThirdItemBuyButtonActionPerformed

    private void FourthItemBuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourthItemBuyButtonActionPerformed
       try {
            if(currentCatalogDriverSelected != 0) {  
                //Get item information
                String title = FourthItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                //Get driver information
                int driverID = getCurrentCatalogDriver();
                //Check if item is available
                PreparedStatement listingPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE ItemID=?");
                listingPS.setInt(1, itemID);
                ResultSet listingRS = listingPS.executeQuery();
                if(listingRS.next()) {
                    int listingID = listingRS.getInt("ListingID");
                    //Query Etsy to make sure listing is still active (not sold out)
                    String etsyQuery = "https://openapi.etsy.com/v2/listings/" + listingID + "?api_key=pzm9kr33wye2gmv9fy2h4g64";
                    //Send the request to etsy for listing results back
                    HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(etsyQuery))
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
                    HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
                    JSONObject jsonResponse = new JSONObject(response.body());
                    //Tell user listing is not active and to remove item from cart based on Etsy results
                    String listingState = jsonResponse.getJSONArray("results").getJSONObject(0).getString("state");
                    if(listingState.equals("active")) {
                        //Check if driver can afford item
                        PreparedStatement driverPointsPS = MyConnection.getConnection().prepareStatement("SELECT DriverPoints.Points, Company.PointToDollar, Company.CompanyID FROM DriverPoints JOIN Sponsor ON Sponsor.CompanyID=DriverPoints.CompanyID JOIN Company ON Sponsor.CompanyID=Company.CompanyID WHERE DriverID=? AND Sponsor.UserID=?");
                        driverPointsPS.setInt(1, driverID);
                        driverPointsPS.setInt(2, userID);
                        ResultSet driverPointsRS = driverPointsPS.executeQuery();
                        if(driverPointsRS.next()) {
                            double price = listingRS.getDouble("Price");
                            int pointToDollar = driverPointsRS.getInt("PointToDollar");
                            double pointCost = price * pointToDollar;
                            int roundedCost = (int) pointCost;
                            if(driverPointsRS.getInt("Points") >= roundedCost) {
                                //Add to purchase table
                                PreparedStatement catalogPurchasePS = MyConnection.getConnection().prepareStatement("INSERT INTO CatalogPurchases (PointCost, MonetaryCost, DriverID, CompanyID, ItemID, PurchaseDate) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)");
                                catalogPurchasePS.setInt(1, roundedCost);
                                catalogPurchasePS.setDouble(2, price);
                                catalogPurchasePS.setInt(3, driverID);
                                catalogPurchasePS.setInt(4, driverPointsRS.getInt("CompanyID"));
                                catalogPurchasePS.setInt(5, itemID);
                                catalogPurchasePS.executeUpdate();
                                currentCatalogDriverSelected = 0;
                            } else {
                                JOptionPane.showMessageDialog(null, "This driver cannot afford the item with their current point total.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Item is no longer an active listing, please remove it from your catalog.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a driver to make a purchase.");
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_FourthItemBuyButtonActionPerformed

    private void PreviousCatalogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousCatalogButtonActionPerformed
        //Get current items (up to four) and add them to the front of next queue (using .isVisible)
        try {
            PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
            pointToDollarPS.setInt(1, userID);
            ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
            int pointToDollarRatio = 100;
            if(pointToDollarRS.next()) {
                pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
            }
            //FourthCatalogItemPanel
            if(FourthCatalogItemPanel.isVisible()) {
                String title = FourthItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(FourthItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = FourthItemImageURLLabel.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //ThirdCatalogItemPanel
            if(ThirdCatalogItemPanel.isVisible()) {
                String title = ThirdItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(ThirdItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = ThirdItemImageURLLabel.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //SecondCatalogItemPanel
            if(SecondCatalogItemPanel.isVisible()) {
                String title = SecondItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(SecondItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = SecondItemImageURLLabel.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //FirstCatalogItemPanel
            if(FirstCatalogItemPanel.isVisible()) {
                String title = FirstItemTitleTextArea.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(FirstItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = FirstItemImageURLLabel.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //Make next button visible
            NextCatalogButton.setVisible(true);
            //Get previous four items and display them through previousQueue
            //Update FourthCatalogItemPanel to have item information
            FourthCatalogItemPanel.setVisible(true);
            CatalogItem previousItem = previousQueue.removeLast();
            //Set item title
            FourthItemTitleTextArea.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            double price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            int roundedCost = (int) price;
            FourthItemPointCostLabel.setText(roundedCost + " Points");
            //Set item image
            String imageURL = previousItem.getImageURL();
            FourthItemImageURLLabel.setText(imageURL);
            URL url = new URL(imageURL);
            Image image = ImageIO.read(url);
            FourthItemImageLabel.setIcon(new ImageIcon(image));
            //Update ThirdCatalogItemPanel to have item information
            ThirdCatalogItemPanel.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            ThirdItemTitleTextArea.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            roundedCost = (int) price;
            ThirdItemPointCostLabel.setText(roundedCost + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            ThirdItemImageURLLabel.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            ThirdItemImageLabel.setIcon(new ImageIcon(image));
            //Update SecondCatalogItemPanel to have item information
            SecondCatalogItemPanel.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            SecondItemTitleTextArea.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            roundedCost = (int) price;
            SecondItemPointCostLabel.setText(roundedCost + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            SecondItemImageURLLabel.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            SecondItemImageLabel.setIcon(new ImageIcon(image));
            //Update FirstCatalogItemPanel to have item information
            FirstCatalogItemPanel.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            FirstItemTitleTextArea.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            roundedCost = (int) price;
            FirstItemPointCostLabel.setText(roundedCost + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            FirstItemImageURLLabel.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            FirstItemImageLabel.setIcon(new ImageIcon(image));
            //If more items exist, leave previous button
            //Otherwise, make it invisible
            if(previousQueue.isEmpty()) {
                PreviousCatalogButton.setVisible(false);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_PreviousCatalogButtonActionPerformed

    private void NextCatalogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextCatalogButtonActionPerformed
        //Get current four items and add them to the previous queue
        try {
            PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
            pointToDollarPS.setInt(1, userID);
            ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
            int pointToDollarRatio = 100;
            if(pointToDollarRS.next()) {
                pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
            }
            //FirstCatalogItemPanel
            String title = FirstItemTitleTextArea.getText();
            String[] tokens = title.split(": ");
            int itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            double price = Double.parseDouble(FirstItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
            String imageURL = FirstItemImageURLLabel.getText();
            CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //SecondCatalogItemPanel
            title = SecondItemTitleTextArea.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(SecondItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = SecondItemImageURLLabel.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //ThirdCatalogItemPanel
            title = ThirdItemTitleTextArea.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(ThirdItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = ThirdItemImageURLLabel.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //FourthItemCatalog
            title = FourthItemTitleTextArea.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(FourthItemPointCostLabel.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = FourthItemImageURLLabel.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //Make previous button visible
            PreviousCatalogButton.setVisible(true);
            //Get next number of items (up to four) and display them
            if(!nextQueue.isEmpty()) {
                FirstCatalogItemPanel.setVisible(true);
                //Update FirstCatalogItemPanel to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                FirstItemTitleTextArea.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                int roundedCost = (int) price;
                FirstItemPointCostLabel.setText(roundedCost + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                FirstItemImageURLLabel.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                FirstItemImageLabel.setIcon(new ImageIcon(image));
            } else {
                FirstCatalogItemPanel.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                SecondCatalogItemPanel.setVisible(true);
                //Update SecondCatalogItemPanel to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                SecondItemTitleTextArea.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                int roundedCost = (int) price;
                SecondItemPointCostLabel.setText(roundedCost + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                SecondItemImageURLLabel.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                SecondItemImageLabel.setIcon(new ImageIcon(image));
            } else {
                SecondCatalogItemPanel.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                ThirdCatalogItemPanel.setVisible(true);
                //Update ThirdCatalogItemPanel to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                ThirdItemTitleTextArea.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                int roundedCost = (int) price;
                ThirdItemPointCostLabel.setText(roundedCost + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                ThirdItemImageURLLabel.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                ThirdItemImageLabel.setIcon(new ImageIcon(image));
            } else {
                ThirdCatalogItemPanel.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                FourthCatalogItemPanel.setVisible(true);
                //Update FourthCatalogItemPanel to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                FourthItemTitleTextArea.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                int roundedCost = (int) price;
                FourthItemPointCostLabel.setText(roundedCost + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                FourthItemImageURLLabel.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                FourthItemImageLabel.setIcon(new ImageIcon(image));
            } else {
                FourthCatalogItemPanel.setVisible(false);
            }
            //If more items exist, leave next button
            //Otherwise, make it invisible
            if(nextQueue.isEmpty()) {
                NextCatalogButton.setVisible(false);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_NextCatalogButtonActionPerformed

    private void DriverUserCatalogListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_DriverUserCatalogListValueChanged
        if(hasDrivers) {
            String selectedDriver = DriverUserCatalogList.getSelectedValue();
            String[] tokens = selectedDriver.split(":");
            int selectedDriverID = Integer.parseInt(tokens[0]);
            setCurrentCatalogDriver(selectedDriverID);
        }
    }//GEN-LAST:event_DriverUserCatalogListValueChanged

    private void CreateSponsorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateSponsorButtonActionPerformed
        CreateSponsorAccount createAccountFrame = new CreateSponsorAccount(userID);
        createAccountFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAccountFrame.setTitle("Good Driver Incentive Program - Create Sponsor Account");
        createAccountFrame.setVisible(true);
    }//GEN-LAST:event_CreateSponsorButtonActionPerformed

// Updated upstream
    private void driverListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_driverListValueChanged
        // TODO add your handling code here:
        try {
            String selectedDriver = driverList.getSelectedValue();
            if(selectedDriver != null) {
                String[] tokens = selectedDriver.split(":");
                int selectedDriverID = Integer.parseInt(tokens[0]);
                PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT Users.FirstName, Users.LastName, Users.PreferredName, Users.Username FROM Driver join Users on Users.UserID = Driver.UserID where Driver.DriverID=?");
                sponsorPS.setInt(1, selectedDriverID);
                ResultSet sponsorRS = sponsorPS.executeQuery();  
                sponsorRS.next();
                driverFirstNameField.setText(sponsorRS.getString("FirstName"));
                driverLastNameField.setText(sponsorRS.getString("LastName"));
                driverPreferredNameField.setText(sponsorRS.getString("PreferredName"));
                driverUsernameField.setText(sponsorRS.getString("Username"));
            } else {
                driverFirstNameField.setText("");
                driverLastNameField.setText("");
                driverPreferredNameField.setText("");
                driverUsernameField.setText("");
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_driverListValueChanged

    private void updateDriverInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDriverInfoButtonActionPerformed
        // TODO add your handling code here:
        try {
            String selectedDriver = driverList.getSelectedValue();
            String[] tokens = selectedDriver.split(":");
            int selectedDriverID = Integer.parseInt(tokens[0]);
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT UserID FROM Driver where DriverID=?");
            sponsorPS.setInt(1, selectedDriverID);
            ResultSet sponsorRS = sponsorPS.executeQuery();  
            sponsorRS.next();
            String userID = sponsorRS.getString("UserID");
            PreparedStatement updateDriverInfoPS = MyConnection.getConnection().prepareStatement("UPDATE Users SET FirstName=?, LastName=?, PreferredName=?, Username=? WHERE UserID=?");
            updateDriverInfoPS.setString(1, driverFirstNameField.getText());
            updateDriverInfoPS.setString(2, driverLastNameField.getText());
            updateDriverInfoPS.setString(3, driverPreferredNameField.getText());
            updateDriverInfoPS.setString(4, driverUsernameField.getText());
            updateDriverInfoPS.setString(5, userID);
            updateDriverInfoPS.executeUpdate();
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_updateDriverInfoButtonActionPerformed

    private void SwitchtoDriverViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwitchtoDriverViewActionPerformed
//        try{
//            int uid = this.getUserID();
//            PreparedStatement switchPS;
//            ResultSet switchRS;
//            String loginQuery = "SELECT * FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?";
//
//            switchPS = MyConnection.getConnection().prepareStatement(loginQuery);
//            switchPS.setInt(1,uid);
//
//            switchRS = switchPS.executeQuery();
//            
//            DriverGUI driverGUI = new DriverGUI();
//            driverGUI.setLoggingIn(true);
//            driverGUI.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//            driverGUI.setTitle("Good Driver Incentive Program - Driver");
//            driverGUI.switchPanels(driverGUI.getProfilePanel());
//            driverGUI.setUserID(switchRS.getInt("UserID"));
//            String fullName = switchRS.getString("FirstName") + " " + switchRS.getString("MiddleName") + " " + switchRS.getString("LastName");
//            driverGUI.setDriverName(fullName);
//            driverGUI.setDriverUsername(uname);
//            String preferredName = switchRS.getString("PreferredName");
//            driverGUI.setDriverPreferredName(preferredName);
//            driverGUI.setDriverPassword(pass);
//            driverGUI.formatCartItemTable();
//            driverGUI.setSponsorCatalogList(switchRS.getInt("UserID"));
//            driverGUI.setApplicationCompanyList(switchRS.getInt("UserID"));
//            driverGUI.setApplicationTable();
//        }catch(SQLException e) {
//                Logger.getLogger(LoginGUI.class.getName()).log(Level.SEVERE, null, e);
//        }
    }//GEN-LAST:event_SwitchtoDriverViewActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) driverReportTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        driverReportTable.setRowSorter(sorter);
        
        RowFilter<DefaultTableModel, Object> rf = null;
        
        if(!(filterText.getText().equals(""))){
            
            try {
                rf = RowFilter.regexFilter(filterText.getText().toString(),0);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            sorter.setRowFilter(rf);
        }
        
        else if(driverFilterDD.getSelectedItem().toString().equals("All Drivers")){
            try {
                rf = RowFilter.regexFilter(" ",0);
            } catch (java.util.regex.PatternSyntaxException e){
                return;
            }
            sorter.setRowFilter(rf);
        }
        
        else{
            String selectedVal = driverFilterDD.getSelectedItem().toString();
            try {
                rf = RowFilter.regexFilter(selectedVal,0);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            sorter.setRowFilter(rf);
        }
    }//GEN-LAST:event_filterButtonActionPerformed


    public void setCurrentCatalogDriver(int driverID) {
        currentCatalogDriverSelected = driverID;
    }
    
    public int getCurrentCatalogDriver() {
        return currentCatalogDriverSelected;
    }
    
    //Helper method for showing catalog items
    public void showCatalogItems(int companyID) {
        try {
            nextQueue = new LinkedList<>();
            previousQueue = new LinkedList<>();
            //Get total number of catalog items for company
            PreparedStatement catalogItemCountPS = MyConnection.getConnection().prepareStatement("SELECT COUNT(*) FROM CatalogItems WHERE CompanyID=? AND Removed=?");
            catalogItemCountPS.setInt(1, companyID);
            catalogItemCountPS.setBoolean(2, false);
            ResultSet catalogItemCountRS = catalogItemCountPS.executeQuery();
            if(catalogItemCountRS.next()) {
                int count = catalogItemCountRS.getInt(1);
                if(count <= 0) {
                    //Show message if there are no items in the catalog
                    CatalogItemPanel.setVisible(false);
                    FirstCatalogItemPanel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(false);
                    NextCatalogButton.setVisible(false);
                    PreviousCatalogButton.setVisible(false);
                    if(!loggingIn) {
                        JOptionPane.showMessageDialog(null, "Catalog is empty, please add items through Catalog Editor Tab.");
                    }
                } else if(count == 1) {
                    //Only show one panel if there is one item
                    CatalogItemPanel.setVisible(true);
                    FirstCatalogItemPanel.setVisible(true);
                    FirstItemImageURLLabel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(false);
                    NextCatalogButton.setVisible(false);
                    PreviousCatalogButton.setVisible(false);
                    //Update FirstCatalogItemPanel to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems JOIN Sponsor ON Sponsor.CompanyID = CatalogItems.CompanyID WHERE Sponsor.UserID=? AND Removed=?");
                    catalogItemPS.setInt(1, userID);
                    catalogItemPS.setBoolean(2, false);
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        FirstItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
                        pointToDollarPS.setInt(1, userID);
                        ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                        if(pointToDollarRS.next()) {
                            int pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                            price = price * pointToDollarRatio;
                            int roundedCost = (int) price;
                            FirstItemPointCostLabel.setText(roundedCost + " Points");
                        }
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FirstItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FirstItemImageLabel.setIcon(new ImageIcon(image));
                    }
                } else if(count == 2) {
                    //Only show two panels if there are two items
                    CatalogItemPanel.setVisible(true);
                    FirstCatalogItemPanel.setVisible(true);
                    FirstItemImageURLLabel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(true);
                    SecondItemImageURLLabel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(false);
                    NextCatalogButton.setVisible(false);
                    PreviousCatalogButton.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
                    pointToDollarPS.setInt(1, userID);
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    //Update FirstCatalogItemPanel to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems JOIN Sponsor ON Sponsor.CompanyID = CatalogItems.CompanyID WHERE Sponsor.UserID=? AND Removed=?");
                    catalogItemPS.setInt(1, userID);
                    catalogItemPS.setBoolean(2, false);
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        FirstItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FirstItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FirstItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FirstItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update SecondCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        SecondItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        SecondItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        SecondItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        SecondItemImageLabel.setIcon(new ImageIcon(image));
                    }
                } else if(count == 3) {
                    //Only show three panels if there are three items
                    CatalogItemPanel.setVisible(true);
                    FirstCatalogItemPanel.setVisible(true);
                    FirstItemImageURLLabel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(true);
                    SecondItemImageURLLabel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(true);
                    ThirdItemImageURLLabel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(false);
                    NextCatalogButton.setVisible(false);
                    PreviousCatalogButton.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
                    pointToDollarPS.setInt(1, userID);
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems JOIN Sponsor ON Sponsor.CompanyID = CatalogItems.CompanyID WHERE Sponsor.UserID=? AND Removed=?");
                    catalogItemPS.setInt(1, userID);
                    catalogItemPS.setBoolean(2, false);
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    //Update FirstCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        FirstItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FirstItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FirstItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FirstItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update SecondCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        SecondItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        SecondItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        SecondItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        SecondItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update ThirdCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        ThirdItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        ThirdItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        ThirdItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        ThirdItemImageLabel.setIcon(new ImageIcon(image));
                    }
                } else if(count == 4) {
                    //Only show four panels if there are four items
                    CatalogItemPanel.setVisible(true);
                    FirstCatalogItemPanel.setVisible(true);
                    FirstItemImageURLLabel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(true);
                    SecondItemImageURLLabel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(true);
                    ThirdItemImageURLLabel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(true);
                    FourthItemImageURLLabel.setVisible(false);
                    NextCatalogButton.setVisible(false);
                    PreviousCatalogButton.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
                    pointToDollarPS.setInt(1, userID);
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems JOIN Sponsor ON Sponsor.CompanyID = CatalogItems.CompanyID WHERE Sponsor.UserID=? AND Removed=?");
                    catalogItemPS.setInt(1, userID);
                    catalogItemPS.setBoolean(2, false);
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    //Update FirstCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        FirstItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FirstItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FirstItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FirstItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update SecondCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        SecondItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        SecondItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        SecondItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        SecondItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update ThirdCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        ThirdItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        ThirdItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        ThirdItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        ThirdItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update FourthCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        FourthItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FourthItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FourthItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FourthItemImageLabel.setIcon(new ImageIcon(image));
                    }
                } else {
                    //Show next button if there are more
                    CatalogItemPanel.setVisible(true);
                    FirstCatalogItemPanel.setVisible(true);
                    FirstItemImageURLLabel.setVisible(false);
                    SecondCatalogItemPanel.setVisible(true);
                    SecondItemImageURLLabel.setVisible(false);
                    ThirdCatalogItemPanel.setVisible(true);
                    ThirdItemImageURLLabel.setVisible(false);
                    FourthCatalogItemPanel.setVisible(true);
                    FourthItemImageURLLabel.setVisible(false);
                    NextCatalogButton.setVisible(true);
                    PreviousCatalogButton.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT Company.PointToDollar FROM Company JOIN Sponsor ON Sponsor.CompanyID=Company.CompanyID WHERE Sponsor.UserID=?");
                    pointToDollarPS.setInt(1, userID);
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems JOIN Sponsor ON Sponsor.CompanyID = CatalogItems.CompanyID WHERE Sponsor.UserID=? AND Removed=?");
                    catalogItemPS.setInt(1, userID);
                    catalogItemPS.setBoolean(2, false);
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    //Update FirstCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        FirstItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FirstItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FirstItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FirstItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update SecondCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        SecondItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        SecondItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        SecondItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        SecondItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update ThirdCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        ThirdItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        ThirdItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        ThirdItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        ThirdItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Update FourthCatalogItemPanel to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        FourthItemTitleTextArea.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        int roundedCost = (int) price;
                        FourthItemPointCostLabel.setText(roundedCost + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        FourthItemImageURLLabel.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        FourthItemImageLabel.setIcon(new ImageIcon(image));
                    }
                    //Store remaining items in array for access by "Next" button
                    while(catalogItemRS.next()) {
                        CatalogItem newCatalogItem = new CatalogItem(catalogItemRS.getInt("ItemID"), catalogItemRS.getDouble("Price"), catalogItemRS.getString("ItemDescription"), catalogItemRS.getString("ItemImage"));
                        nextQueue.addLast(newCatalogItem);
                    }
                }
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Helper method to populate the drivers for a company
    public void setCompanyDriverList(int userID) {
        ArrayList<String> listDataArrayList = new ArrayList<String>();
        int driverCounter = 0;
        try {
            PreparedStatement driversForCompanyPS = MyConnection.getConnection().prepareStatement("SELECT Driver.DriverID, Users.FirstName, Users.LastName, Users.Username FROM DriverPoints join Sponsor on Sponsor.CompanyID=DriverPoints.CompanyID join Driver on Driver.DriverID=DriverPoints.DriverID join Users on Driver.UserID=Users.UserID where Sponsor.UserID=?");
            driversForCompanyPS.setInt(1, userID);
            ResultSet driversForCompanyRS = driversForCompanyPS.executeQuery();
            while(driversForCompanyRS.next()) {
                listDataArrayList.add(driversForCompanyRS.getInt("DriverID") + ": " + driversForCompanyRS.getString("FirstName") + " " + driversForCompanyRS.getString("LastName") + " (" + driversForCompanyRS.getString("Username") + ")");
                driverCounter++;
            }
            if(driverCounter == 0) {
                setHasDrivers(false);
                String[] listData = {"No drivers available"};
                DriverUserCatalogList.setListData(listData);
            } else {
                setHasDrivers(true);
                String[] listData = listDataArrayList.toArray(new String[listDataArrayList.size()]);
                DriverUserCatalogList.setListData(listData);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Helper Methods for getting and setting user information in the profile
    public void setSponsorName(String name) {
        jTextField1.setText(name);
    }
    
    public void setSponsorUsername(String username) {
        jTextField2.setText(username);
    }
    
    public void setSponsorPreferredName(String preferredName) {
        jTextField3.setText(preferredName);
    }
    
    public void setSponsorPassword(String password) {
        jPasswordField1.setText(password);
    }
    
    public void setCompanyPointToDollarRatio(String ratio) {
        jTextField4.setText(ratio);
    }
    
    public void setUserID(int id) {
        userID = id;
    }
    
    public int getUserID() {
        return userID;
    }
    
    public int getItemRequestLimit() {
        return ITEM_REQUEST_LIMIT;
    }
    
    public void setLastImageURL(String lastURL) {
        lastImageURL = lastURL;
    }
    
    public String getLastImageURL() {
        return lastImageURL;
    }
    
    public void setSearchTableSelected(Boolean selected) {
        searchTableSelected = selected;
    }
    
    public Boolean getSearchTableSelected() {
        return searchTableSelected;
    }
    
    public void setCatalogTableSelected(Boolean selected) {
        catalogTableSelected = selected;
    }
    
    public Boolean getCatalogTableSelected() {
        return catalogTableSelected;
    }
    
    public Boolean hasDrivers() {
        return hasDrivers;
    }
    
    public void setHasDrivers(Boolean has) {
        hasDrivers = has;
    }
    
    public void setLoggingIn(Boolean login) {
        loggingIn = login;
    }
    
    public Boolean getLoggingIn() {
        return loggingIn;
    }
    
    public void formatCatalogItemTables() {
        TableColumnModel tcm = jTable1.getColumnModel();
        tcm.removeColumn(tcm.getColumn(0));
        tcm = jTable3.getColumnModel();
        tcm.removeColumn(tcm.getColumn(4));
        tcm.removeColumn(tcm.getColumn(3));
    }
    
    public void formatApplicationTable() {
        TableColumnModel tcm = applicationTable.getColumnModel();
        tcm.removeColumn(tcm.getColumn(0));
    }
    
    public void setDriverApplicationTable() {
        DefaultTableModel dtm = (DefaultTableModel) applicationTable.getModel();
        if(dtm.getRowCount() > 0) {
            for(int i = dtm.getRowCount()-1; i >= 0; i--) {
                dtm.removeRow(i);
            }
        }
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT DriverApplications.DriverApplicationID, Users.FirstName, Users.LastName, Users.Username, DriverApplications.ApplicationDate, DriverApplications.ApplicationStatus, DriverApplications.Reason FROM DriverApplications join Sponsor on Sponsor.CompanyID=DriverApplications.CompanyID join Driver on Driver.DriverID=DriverApplications.DriverID join Users on Driver.UserID=Users.UserID where Sponsor.userID=?");
            sponsorPS.setInt(1, this.getUserID());
            ResultSet sponsorRS = sponsorPS.executeQuery();
            while (sponsorRS.next()) {
                Object[] rowData = {sponsorRS.getInt("DriverApplicationID"), sponsorRS.getString("FirstName"), sponsorRS.getString("LastName"), sponsorRS.getString("Username"), sponsorRS.getString("ApplicationStatus"), sponsorRS.getString("Reason"), sponsorRS.getDate("ApplicationDate")};
                dtm.addRow(rowData);
            }

        } catch (SQLException ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateCatalogItemTable() {
        ArrayList<String> listDataArrayList = new ArrayList<String>();
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
            sponsorPS.setInt(1, this.getUserID());
            ResultSet sponsorRS = sponsorPS.executeQuery();
            if(sponsorRS.next()) {
                int companyID = sponsorRS.getInt("CompanyID");
                PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=? AND Removed=?");
                catalogItemPS.setInt(1, companyID);
                catalogItemPS.setBoolean(2, false);
                ResultSet catalogItemRS = catalogItemPS.executeQuery();
                DefaultTableModel dtm = (DefaultTableModel) jTable3.getModel();
                //Clear all rows from previous entries if necessary
                if(dtm.getRowCount() > 0) {
                    for(int i = dtm.getRowCount()-1; i >= 0; i--) {
                        dtm.removeRow(i);
                    }
                }
                while(catalogItemRS.next()) {
                    Object[] rowData = {catalogItemRS.getString("ItemDescription"), catalogItemRS.getDouble("Price"), catalogItemRS.getInt("Quantity"), catalogItemRS.getInt("ItemID"), catalogItemRS.getString("ItemImage")};
                    dtm.addRow(rowData);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Helper Class for catalog items
    public class CatalogItem {
        private int itemID;
        private double price;
        private String title;
        private String imageURL;
        
        public CatalogItem(int inItemID, double inPrice, String inTitle, String inImageURL) {
            itemID = inItemID;
            price = inPrice;
            title = inTitle;
            imageURL = inImageURL;
        }
        
        public int getItemID() {
            return itemID;
        }
        
        public double getPrice() {
            return price;
        }
        
        public String getTitle() {
            return title;
        }
        
        public String getImageURL() {
            return imageURL;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SponsorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SponsorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SponsorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SponsorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SponsorGUI().setVisible(true);
            }
        });
    }
    
    public void switchPanels(javax.swing.JPanel panel)
    {
        layeredPane.removeAll();
        layeredPane.add(panel);
        layeredPane.repaint();
        layeredPane.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CatalogItemPanel;
    private javax.swing.JLabel CatalogTitleLabel;
    private javax.swing.JLabel ChangeDriverCatalogLabel;
    private javax.swing.JButton CreateDriverButton;
    private javax.swing.JButton CreateSponsorButton;
    private javax.swing.JList<String> DriverUserCatalogList;
    private javax.swing.JScrollPane DriverUserCatalogScrollPane;
    private javax.swing.JPanel FirstCatalogItemPanel;
    private javax.swing.JButton FirstItemBuyButton;
    private javax.swing.JLabel FirstItemImageLabel;
    private javax.swing.JLabel FirstItemImageURLLabel;
    private javax.swing.JLabel FirstItemPointCostLabel;
    private javax.swing.JScrollPane FirstItemTitleScrollPane;
    private javax.swing.JTextArea FirstItemTitleTextArea;
    private javax.swing.JPanel FourthCatalogItemPanel;
    private javax.swing.JButton FourthItemBuyButton;
    private javax.swing.JLabel FourthItemImageLabel;
    private javax.swing.JLabel FourthItemImageURLLabel;
    private javax.swing.JLabel FourthItemPointCostLabel;
    private javax.swing.JScrollPane FourthItemTitleScrollPane;
    private javax.swing.JTextArea FourthItemTitleTextArea;
    private javax.swing.JButton NextCatalogButton;
    private javax.swing.JButton PreviousCatalogButton;
    private javax.swing.JPanel SecondCatalogItemPanel;
    private javax.swing.JButton SecondItemBuyButton;
    private javax.swing.JLabel SecondItemImageLabel;
    private javax.swing.JLabel SecondItemImageURLLabel;
    private javax.swing.JLabel SecondItemPointCostLabel;
    private javax.swing.JScrollPane SecondItemTitleScrollPane;
    private javax.swing.JTextArea SecondItemTitleTextArea;
    private javax.swing.JButton SwitchtoDriverView;
    private javax.swing.JPanel ThirdCatalogItemPanel;
    private javax.swing.JButton ThirdItemBuyButton;
    private javax.swing.JLabel ThirdItemImageLabel;
    private javax.swing.JLabel ThirdItemImageURLLabel;
    private javax.swing.JLabel ThirdItemPointCostLabel;
    private javax.swing.JScrollPane ThirdItemTitleScrollPane;
    private javax.swing.JTextArea ThirdItemTitleTextArea;
    private javax.swing.JTable applicationTable;
    private javax.swing.JButton approveApplicationButton;
    private javax.swing.JPanel catalog;
    private javax.swing.JPanel catalogEditor;
    private javax.swing.JButton declineApplicationButton;
    private javax.swing.JComboBox<String> driverFilterDD;
    private javax.swing.JTextField driverFirstNameField;
    private javax.swing.JTextField driverLastNameField;
    private javax.swing.JList<String> driverList;
    private javax.swing.JLabel driverListLabel;
    private javax.swing.JScrollPane driverListScrollPane;
    private javax.swing.JPanel driverPoints;
    private javax.swing.JTextField driverPreferredNameField;
    private javax.swing.JTable driverReportTable;
    private javax.swing.JTextField driverUsernameField;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JTextField filterText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JPanel myAccount;
    private javax.swing.JPanel myApplication;
    private javax.swing.JLabel pointChangeLabel;
    private javax.swing.JTextField pointChangeVal;
    private javax.swing.JLabel reasonLabel;
    private javax.swing.JTextField reasonText;
    private javax.swing.JTextField reasonTextField;
    private javax.swing.JScrollPane reportScrollPane;
    private javax.swing.JPanel reporting;
    private javax.swing.JButton reportingPanelBtn;
    private javax.swing.JButton submitPtChBtn;
    private javax.swing.JButton updateDriverInfoButton;
    // End of variables declaration//GEN-END:variables
}
