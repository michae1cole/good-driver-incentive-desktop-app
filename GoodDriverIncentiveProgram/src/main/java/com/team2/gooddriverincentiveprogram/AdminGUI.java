/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.team2.gooddriverincentiveprogram;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.springframework.security.crypto.bcrypt.BCrypt;

/**
 *
 * @author benjaminjoye
 */
public class AdminGUI extends javax.swing.JFrame {

    /**
     * Creates new form admin
     */
    public AdminGUI() {
        initComponents();
    }
    
    private int userID;
    private int selectedCompanyID = -1;
    private Boolean hasUsers;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        layeredPane = new javax.swing.JLayeredPane();
        myAccount = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        userAccountList = new javax.swing.JList<>();
        updateUserInfoButton = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        userPasswordField = new javax.swing.JPasswordField();
        jLabel31 = new javax.swing.JLabel();
        userUsernameField = new javax.swing.JTextField();
        userPreferredNameField = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        userLastNameField = new javax.swing.JTextField();
        userFirstNameField = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        catalog = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        reporting = new javax.swing.JPanel();
        salesBySponsorButton = new javax.swing.JButton();
        salesByDriverButton = new javax.swing.JButton();
        invoiceButton = new javax.swing.JButton();
        auditLogButton = new javax.swing.JButton();
        reportingLayeredPane = new javax.swing.JLayeredPane();
        salesBySponsorPanel = new javax.swing.JPanel();
        salesByDriverPanel = new javax.swing.JPanel();
        invoicePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        companyDD = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        fromDateText = new javax.swing.JTextField();
        toDateText = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        invoiceGenerateButton = new javax.swing.JButton();
        invoiceCreatePDFButton = new javax.swing.JButton();
        auditLogPanel = new javax.swing.JPanel();
        driverApplicationsReportButton = new javax.swing.JButton();
        pointChangesReportButton = new javax.swing.JButton();
        passwordChangesReportButton = new javax.swing.JButton();
        loginAttemptsReportButton = new javax.swing.JButton();
        auditLogLayeredPanel = new javax.swing.JLayeredPane();
        driverApplicationsReportPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        driverApplicationsReportTable = new javax.swing.JTable();
        fromDateTextDA = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        toDateTextDA = new javax.swing.JTextField();
        driverApplicationsGenerateButton = new javax.swing.JButton();
        driverApplicationsCreatePDFButton = new javax.swing.JButton();
        pointChangesReportPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        pointChangesReportTable = new javax.swing.JTable();
        fromDateTextPC = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        toDateTextPC = new javax.swing.JTextField();
        pointChangesGenerateButton = new javax.swing.JButton();
        pointChangesCreatePDFButton = new javax.swing.JButton();
        passwordChangesReportPanel = new javax.swing.JPanel();
        fromDateTextPass = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        toDateTextPass = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        passwordChangesGenerateButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        passwordChangesReportTable = new javax.swing.JTable();
        passwordChangesCreatePDFButton = new javax.swing.JButton();
        loginAttemptsReportPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        loginAttemptsReportTable = new javax.swing.JTable();
        fromDateTextLA = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        toDateTextLA = new javax.swing.JTextField();
        loginAttemptsGenerateButton = new javax.swing.JButton();
        loginAttemptsCreatePDFButton = new javax.swing.JButton();
        sponsorView = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SponsorList = new javax.swing.JList<>();
        jLabel17 = new javax.swing.JLabel();
        ViewSponsorPage = new javax.swing.JButton();
        ViewDriverPage = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        SwitchToViews = new javax.swing.JButton();
        CreateCompanyButton = new javax.swing.JButton();
        CreateDriverButton1 = new javax.swing.JButton();
        CreateSponsorButton = new javax.swing.JButton();
        CreateAdminButton = new javax.swing.JButton();
        CreateDriverButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 49, 66));

        layeredPane.setLayout(new java.awt.CardLayout());

        myAccount.setBackground(new java.awt.Color(191, 191, 192));

        jTextField1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Username:");

        jTextField2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Preferred Name:");

        jTextField3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Password:");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Account Type:");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel7.setText("Admin");

        jButton6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton6.setText("Update");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton7.setText("Update");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton8.setText("Update");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton9.setText("Update");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Account");

        jPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel29.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("All User Accounts");

        userAccountList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userAccountList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userAccountListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(userAccountList);

        updateUserInfoButton.setText("Update");
        updateUserInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUserInfoButtonActionPerformed(evt);
            }
        });

        jLabel30.setText("Password:");

        jLabel31.setText("Username:");

        jLabel32.setText("Preferred Name:");

        jLabel33.setText("Last Name:");

        jLabel34.setText("First Name:");

        javax.swing.GroupLayout myAccountLayout = new javax.swing.GroupLayout(myAccount);
        myAccount.setLayout(myAccountLayout);
        myAccountLayout.setHorizontalGroup(
            myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(myAccountLayout.createSequentialGroup()
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myAccountLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(myAccountLayout.createSequentialGroup()
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(myAccountLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(27, 27, 27)
                                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                                    .addComponent(jTextField2)
                                    .addComponent(jTextField3)
                                    .addComponent(jPasswordField1))
                                .addGap(18, 18, 18)
                                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jButton9)))
                            .addGroup(myAccountLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(myAccountLayout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel33)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel32)
                                            .addComponent(jLabel31)
                                            .addComponent(jLabel30))
                                        .addGap(36, 36, 36)
                                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(userLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userPreferredNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(myAccountLayout.createSequentialGroup()
                                        .addGap(217, 217, 217)
                                        .addComponent(updateUserInfoButton)))))
                        .addGap(0, 370, Short.MAX_VALUE)))
                .addContainerGap())
        );
        myAccountLayout.setVerticalGroup(
            myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myAccountLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton9)
                    .addComponent(jPasswordField1))
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(55, 55, 55)
                .addComponent(jLabel29)
                .addGap(18, 18, 18)
                .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(myAccountLayout.createSequentialGroup()
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(userFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(userLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(userPreferredNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(myAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addGap(18, 18, 18)
                        .addComponent(updateUserInfoButton))
                    .addComponent(jScrollPane7))
                .addGap(45, 45, 45))
        );

        layeredPane.add(myAccount, "card2");

        catalog.setBackground(new java.awt.Color(191, 192, 192));

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Catalog");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("description");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("price");

        jButton14.setText("Buy");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("description");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("price");

        jButton15.setText("Buy");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("description");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("price");

        jButton16.setText("Buy");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("description");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("price");

        jButton17.setText("Buy");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout catalogLayout = new javax.swing.GroupLayout(catalog);
        catalog.setLayout(catalogLayout);
        catalogLayout.setHorizontalGroup(
            catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 1076, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(catalogLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(53, 53, 53)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
        );
        catalogLayout.setVerticalGroup(
            catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(catalogLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(catalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(417, Short.MAX_VALUE))
        );

        layeredPane.add(catalog, "card4");

        reporting.setBackground(new java.awt.Color(191, 192, 192));

        salesBySponsorButton.setText("Sales by Sponsor");
        salesBySponsorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesBySponsorButtonActionPerformed(evt);
            }
        });

        salesByDriverButton.setText("Sales by Driver");
        salesByDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesByDriverButtonActionPerformed(evt);
            }
        });

        invoiceButton.setText("Invoice");
        invoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceButtonActionPerformed(evt);
            }
        });

        auditLogButton.setText("Audit Log");
        auditLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auditLogButtonActionPerformed(evt);
            }
        });

        reportingLayeredPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        reportingLayeredPane.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout salesBySponsorPanelLayout = new javax.swing.GroupLayout(salesBySponsorPanel);
        salesBySponsorPanel.setLayout(salesBySponsorPanelLayout);
        salesBySponsorPanelLayout.setHorizontalGroup(
            salesBySponsorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1030, Short.MAX_VALUE)
        );
        salesBySponsorPanelLayout.setVerticalGroup(
            salesBySponsorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        reportingLayeredPane.add(salesBySponsorPanel, "card2");

        javax.swing.GroupLayout salesByDriverPanelLayout = new javax.swing.GroupLayout(salesByDriverPanel);
        salesByDriverPanel.setLayout(salesByDriverPanelLayout);
        salesByDriverPanelLayout.setHorizontalGroup(
            salesByDriverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1030, Short.MAX_VALUE)
        );
        salesByDriverPanelLayout.setVerticalGroup(
            salesByDriverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        reportingLayeredPane.add(salesByDriverPanel, "card3");

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Company Name", "Total From Drivers ($)", "Admin Fee Due ($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(invoiceTable);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Select a Company");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("From (YYYY-MM-DD)");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("To (YYYY-MM-DD)");

        invoiceGenerateButton.setText("Generate");
        invoiceGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceGenerateButtonActionPerformed(evt);
            }
        });

        invoiceCreatePDFButton.setText("Create PDF from Table");
        invoiceCreatePDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceCreatePDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(companyDD, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invoicePanelLayout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invoicePanelLayout.createSequentialGroup()
                                .addComponent(fromDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(toDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(invoiceGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(invoiceCreatePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(companyDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceGenerateButton)
                    .addComponent(invoiceCreatePDFButton))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );

        reportingLayeredPane.add(invoicePanel, "card4");

        driverApplicationsReportButton.setText("Driver Applications");
        driverApplicationsReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverApplicationsReportButtonActionPerformed(evt);
            }
        });

        pointChangesReportButton.setText("Point Changes");
        pointChangesReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointChangesReportButtonActionPerformed(evt);
            }
        });

        passwordChangesReportButton.setText("Password Changes");
        passwordChangesReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordChangesReportButtonActionPerformed(evt);
            }
        });

        loginAttemptsReportButton.setText("Login Attempts");
        loginAttemptsReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginAttemptsReportButtonActionPerformed(evt);
            }
        });

        auditLogLayeredPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        auditLogLayeredPanel.setLayout(new java.awt.CardLayout());

        driverApplicationsReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Company", "Driver", "Application Status", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(driverApplicationsReportTable);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("From (YYYY-MM-DD)");

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("To (YYYY-MM-DD)");

        driverApplicationsGenerateButton.setText("Generate");
        driverApplicationsGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverApplicationsGenerateButtonActionPerformed(evt);
            }
        });

        driverApplicationsCreatePDFButton.setText("Create PDF from Table");
        driverApplicationsCreatePDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverApplicationsCreatePDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout driverApplicationsReportPanelLayout = new javax.swing.GroupLayout(driverApplicationsReportPanel);
        driverApplicationsReportPanel.setLayout(driverApplicationsReportPanelLayout);
        driverApplicationsReportPanelLayout.setHorizontalGroup(
            driverApplicationsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverApplicationsReportPanelLayout.createSequentialGroup()
                .addContainerGap(192, Short.MAX_VALUE)
                .addGroup(driverApplicationsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(driverApplicationsReportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(driverApplicationsReportPanelLayout.createSequentialGroup()
                        .addComponent(fromDateTextDA, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toDateTextDA, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(driverApplicationsGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(driverApplicationsCreatePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverApplicationsReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        driverApplicationsReportPanelLayout.setVerticalGroup(
            driverApplicationsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, driverApplicationsReportPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(driverApplicationsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(driverApplicationsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateTextDA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateTextDA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(driverApplicationsGenerateButton)
                    .addComponent(driverApplicationsCreatePDFButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        auditLogLayeredPanel.add(driverApplicationsReportPanel, "card2");

        pointChangesReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Company", "Driver", "Number of Points", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(pointChangesReportTable);
        if (pointChangesReportTable.getColumnModel().getColumnCount() > 0) {
            pointChangesReportTable.getColumnModel().getColumn(3).setHeaderValue("Number of Points");
            pointChangesReportTable.getColumnModel().getColumn(4).setHeaderValue("Reason");
        }

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("From (YYYY-MM-DD)");

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("To (YYYY-MM-DD)");

        pointChangesGenerateButton.setText("Generate");
        pointChangesGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointChangesGenerateButtonActionPerformed(evt);
            }
        });

        pointChangesCreatePDFButton.setText("Create PDF from Table");
        pointChangesCreatePDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointChangesCreatePDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pointChangesReportPanelLayout = new javax.swing.GroupLayout(pointChangesReportPanel);
        pointChangesReportPanel.setLayout(pointChangesReportPanelLayout);
        pointChangesReportPanelLayout.setHorizontalGroup(
            pointChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap(192, Short.MAX_VALUE)
                .addGroup(pointChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pointChangesReportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pointChangesReportPanelLayout.createSequentialGroup()
                        .addComponent(fromDateTextPC, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toDateTextPC, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pointChangesGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pointChangesCreatePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        pointChangesReportPanelLayout.setVerticalGroup(
            pointChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(pointChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pointChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateTextPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateTextPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointChangesGenerateButton)
                    .addComponent(pointChangesCreatePDFButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        auditLogLayeredPanel.add(pointChangesReportPanel, "card3");

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("From (YYYY-MM-DD)");

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("To (YYYY-MM-DD)");

        passwordChangesGenerateButton.setText("Generate");
        passwordChangesGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordChangesGenerateButtonActionPerformed(evt);
            }
        });

        passwordChangesReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "User", "Type of Change"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(passwordChangesReportTable);

        passwordChangesCreatePDFButton.setText("Create PDF from Table");
        passwordChangesCreatePDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordChangesCreatePDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout passwordChangesReportPanelLayout = new javax.swing.GroupLayout(passwordChangesReportPanel);
        passwordChangesReportPanel.setLayout(passwordChangesReportPanelLayout);
        passwordChangesReportPanelLayout.setHorizontalGroup(
            passwordChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap(192, Short.MAX_VALUE)
                .addGroup(passwordChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(passwordChangesReportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(passwordChangesReportPanelLayout.createSequentialGroup()
                        .addComponent(fromDateTextPass, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toDateTextPass, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(passwordChangesGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(passwordChangesCreatePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        passwordChangesReportPanelLayout.setVerticalGroup(
            passwordChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordChangesReportPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(passwordChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(passwordChangesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateTextPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateTextPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordChangesGenerateButton)
                    .addComponent(passwordChangesCreatePDFButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        auditLogLayeredPanel.add(passwordChangesReportPanel, "card4");

        loginAttemptsReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Username", "Success/Failure"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(loginAttemptsReportTable);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("From (YYYY-MM-DD)");

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("To (YYYY-MM-DD)");

        loginAttemptsGenerateButton.setText("Generate");
        loginAttemptsGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginAttemptsGenerateButtonActionPerformed(evt);
            }
        });

        loginAttemptsCreatePDFButton.setText("Create PDF from Table");
        loginAttemptsCreatePDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginAttemptsCreatePDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginAttemptsReportPanelLayout = new javax.swing.GroupLayout(loginAttemptsReportPanel);
        loginAttemptsReportPanel.setLayout(loginAttemptsReportPanelLayout);
        loginAttemptsReportPanelLayout.setHorizontalGroup(
            loginAttemptsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginAttemptsReportPanelLayout.createSequentialGroup()
                .addContainerGap(192, Short.MAX_VALUE)
                .addGroup(loginAttemptsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginAttemptsReportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginAttemptsReportPanelLayout.createSequentialGroup()
                        .addComponent(fromDateTextLA, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toDateTextLA, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(loginAttemptsGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(loginAttemptsCreatePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginAttemptsReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        loginAttemptsReportPanelLayout.setVerticalGroup(
            loginAttemptsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginAttemptsReportPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(loginAttemptsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loginAttemptsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateTextLA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateTextLA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginAttemptsGenerateButton)
                    .addComponent(loginAttemptsCreatePDFButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        auditLogLayeredPanel.add(loginAttemptsReportPanel, "card5");

        javax.swing.GroupLayout auditLogPanelLayout = new javax.swing.GroupLayout(auditLogPanel);
        auditLogPanel.setLayout(auditLogPanelLayout);
        auditLogPanelLayout.setHorizontalGroup(
            auditLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(auditLogPanelLayout.createSequentialGroup()
                .addGroup(auditLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(auditLogPanelLayout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(driverApplicationsReportButton)
                        .addGap(18, 18, 18)
                        .addComponent(pointChangesReportButton)
                        .addGap(18, 18, 18)
                        .addComponent(passwordChangesReportButton)
                        .addGap(18, 18, 18)
                        .addComponent(loginAttemptsReportButton))
                    .addGroup(auditLogPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(auditLogLayeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        auditLogPanelLayout.setVerticalGroup(
            auditLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(auditLogPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(auditLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driverApplicationsReportButton)
                    .addComponent(pointChangesReportButton)
                    .addComponent(passwordChangesReportButton)
                    .addComponent(loginAttemptsReportButton))
                .addGap(18, 18, 18)
                .addComponent(auditLogLayeredPanel)
                .addContainerGap())
        );

        reportingLayeredPane.add(auditLogPanel, "card5");

        javax.swing.GroupLayout reportingLayout = new javax.swing.GroupLayout(reporting);
        reporting.setLayout(reportingLayout);
        reportingLayout.setHorizontalGroup(
            reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportingLayout.createSequentialGroup()
                .addGroup(reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportingLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(salesBySponsorButton)
                        .addGap(18, 18, 18)
                        .addComponent(salesByDriverButton)
                        .addGap(18, 18, 18)
                        .addComponent(invoiceButton)
                        .addGap(18, 18, 18)
                        .addComponent(auditLogButton))
                    .addGroup(reportingLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(reportingLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        reportingLayout.setVerticalGroup(
            reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportingLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(reportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salesBySponsorButton)
                    .addComponent(salesByDriverButton)
                    .addComponent(invoiceButton)
                    .addComponent(auditLogButton))
                .addGap(18, 18, 18)
                .addComponent(reportingLayeredPane)
                .addContainerGap())
        );

        layeredPane.add(reporting, "card4");

        SponsorList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SponsorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SponsorListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(SponsorList);

        jLabel17.setText("Select Company Page to View");

        ViewSponsorPage.setText("View Sponsor Page");
        ViewSponsorPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewSponsorPageActionPerformed(evt);
            }
        });

        ViewDriverPage.setText("View Driver Page");
        ViewDriverPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDriverPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sponsorViewLayout = new javax.swing.GroupLayout(sponsorView);
        sponsorView.setLayout(sponsorViewLayout);
        sponsorViewLayout.setHorizontalGroup(
            sponsorViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sponsorViewLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(sponsorViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(411, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sponsorViewLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ViewDriverPage)
                .addGap(18, 18, 18)
                .addComponent(ViewSponsorPage)
                .addGap(77, 77, 77))
        );
        sponsorViewLayout.setVerticalGroup(
            sponsorViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sponsorViewLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sponsorViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewSponsorPage)
                    .addComponent(ViewDriverPage))
                .addContainerGap(402, Short.MAX_VALUE))
        );

        layeredPane.add(sponsorView, "card5");

        jButton23.setText("Accounts");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton29.setText("Reporting");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton13.setText("Log Out");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton30.setText("Delete Account");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        SwitchToViews.setText("Switch View");
        SwitchToViews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwitchToViewsActionPerformed(evt);
            }
        });

        CreateCompanyButton.setText("Create Company");
        CreateCompanyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCompanyButtonActionPerformed(evt);
            }
        });

        CreateDriverButton1.setText("Add Driver To Company");
        CreateDriverButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDriverButton1ActionPerformed(evt);
            }
        });

        CreateSponsorButton.setText("Create Sponsor");
        CreateSponsorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateSponsorButtonActionPerformed(evt);
            }
        });

        CreateAdminButton.setText("Create Admin");
        CreateAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateAdminButtonActionPerformed(evt);
            }
        });

        CreateDriverButton.setText("Create Driver");
        CreateDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDriverButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredPane)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(SwitchToViews, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CreateSponsorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CreateAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CreateDriverButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CreateCompanyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CreateDriverButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(jButton29)
                    .addComponent(CreateSponsorButton)
                    .addComponent(CreateAdminButton)
                    .addComponent(CreateDriverButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23)
                    .addComponent(jButton30)
                    .addComponent(SwitchToViews)
                    .addComponent(CreateCompanyButton)
                    .addComponent(CreateDriverButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layeredPane)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    //Preferred Name Update Button
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String newPreferredName = jTextField3.getText();
        try {
            PreparedStatement preferredNameSelectPS;
            ResultSet preferredNameSelectRS;
            String preferredNameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
            preferredNameSelectPS = MyConnection.getConnection().prepareStatement(preferredNameSelectQuery);
            preferredNameSelectPS.setInt(1, this.getUserID());
            preferredNameSelectRS = preferredNameSelectPS.executeQuery();
            if(preferredNameSelectRS.next()) {
                String oldPreferredName = preferredNameSelectRS.getString("PreferredName");
                //If new preferred name is same as old, don't update database
                if(newPreferredName.equals(oldPreferredName)) {
                    JOptionPane.showMessageDialog(null, "New preferred name is the same as your old preferred name.");
                } else {
                    //Update database to have new preferred name
                    PreparedStatement updatePreferredNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET PreferredName=? WHERE UserID=?");
                    updatePreferredNamePreparedStatement.setString(1, newPreferredName);
                    updatePreferredNamePreparedStatement.setInt(2, this.getUserID());
                    updatePreferredNamePreparedStatement.executeUpdate();
                    this.setAdminPreferredName(newPreferredName);
                }
            }
        } catch(SQLException e) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    //Password Update Button
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String newPassword = jPasswordField1.getText();
        //Check for valid password using regex
        //https://www.geeksforgeeks.org/how-to-validate-a-password-using-regular-expressions-in-java/
        String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,20}$"; 
        Pattern passwordPattern = Pattern.compile(passwordRegex);
        Matcher passwordMatcher = passwordPattern.matcher(newPassword);
        if(!passwordMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Password must be 8-20 characters, have one uppercase, one lowercase, one digit, one special character, and no white space.");
        } else {
            //If password does match criteria, get the user's current password
            try {
                PreparedStatement passwordSelectPS;
                ResultSet passwordSelectRS;
                String passwordSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                passwordSelectPS = MyConnection.getConnection().prepareStatement(passwordSelectQuery);
                passwordSelectPS.setInt(1, this.getUserID());
                passwordSelectRS = passwordSelectPS.executeQuery();
                if(passwordSelectRS.next()) {
                    String oldPassword = passwordSelectRS.getString("UserPassword");
                    //If new password is same as old, don't update database
                    if(BCrypt.checkpw(newPassword, oldPassword)) {
                        JOptionPane.showMessageDialog(null, "New password is the same as your old password.");
                    } else {
                        //Update database to have new password
                        PreparedStatement updatePasswordPreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET UserPassword=? WHERE UserID=?");
                        String pw_hash = BCrypt.hashpw(newPassword, BCrypt.gensalt());
                        updatePasswordPreparedStatement.setString(1, pw_hash);
                        updatePasswordPreparedStatement.setInt(2, this.getUserID());
                        updatePasswordPreparedStatement.executeUpdate();
                        this.setAdminPassword(newPassword);
                        //Record password change for audit loging
                        PreparedStatement passwordChangePS = MyConnection.getConnection().prepareStatement("INSERT INTO PasswordChange (PasswordChangeDate, PasswordChangeType, UserChangedID, UserChangingID) VALUES (CURRENT_TIMESTAMP, ?, ?, ?)");
                        passwordChangePS.setString(1, "change from profile - self change");
                        passwordChangePS.setInt(2, this.getUserID());
                        passwordChangePS.setInt(3, this.getUserID());
                        passwordChangePS.executeUpdate();
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        switchPanels(myAccount);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
        switchPanels(reporting);
    }//GEN-LAST:event_jButton29ActionPerformed

    //Logout button
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        //Redirect to login frame
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setTitle("Good Driver Incentive Program - Login");
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    //Name Update Button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String newName = jTextField1.getText();
        if(newName.replaceAll(" ", "").equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
        }
        String[] splitName = newName.split(" ");
        //Check if all names were entered
        if(splitName.length != 3) {
            JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
        } else {
            try {
                String newFirstName = splitName[0];
                String newMiddleName = splitName[1];
                String newLastName = splitName[2];
                PreparedStatement nameSelectPS;
                ResultSet nameSelectRS;
                String nameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                nameSelectPS = MyConnection.getConnection().prepareStatement(nameSelectQuery);
                nameSelectPS.setInt(1, this.getUserID());
                nameSelectRS = nameSelectPS.executeQuery();
                if(nameSelectRS.next()) {
                    //Update the database to have the three new names
                    PreparedStatement updateFirstNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET FirstName=? WHERE UserID=?");
                    updateFirstNamePreparedStatement.setString(1, newFirstName);
                    updateFirstNamePreparedStatement.setInt(2, this.getUserID());
                    PreparedStatement updateMiddleNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET MiddleName=? WHERE UserID=?");
                    updateMiddleNamePreparedStatement.setString(1, newMiddleName);
                    updateMiddleNamePreparedStatement.setInt(2, this.getUserID());
                    PreparedStatement updateLastNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET LastName=? WHERE UserID=?");
                    updateLastNamePreparedStatement.setString(1, newLastName);
                    updateLastNamePreparedStatement.setInt(2, this.getUserID());
                    updateFirstNamePreparedStatement.executeUpdate();
                    updateMiddleNamePreparedStatement.executeUpdate();
                    updateLastNamePreparedStatement.executeUpdate();
                    this.setAdminName(newName);
                }
            } catch(SQLException e) {
                Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //Username Update Button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String newUsername = jTextField2.getText();
        //Check for valid username using regex (email)
        //https://howtodoinjava.com/java/regex/java-regex-validate-email-address/
        String usernameRegex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        Pattern usernamePattern = Pattern.compile(usernameRegex);
        Matcher usernameMatcher = usernamePattern.matcher(newUsername);
        if(!usernameMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please enter a valid username.", "Username Invalid", 2);
        } else {
            //If username does match criteria, get the user's current username
            try {
                PreparedStatement usernameSelectPS;
                ResultSet usernameSelectRS;
                String usernameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                usernameSelectPS = MyConnection.getConnection().prepareStatement(usernameSelectQuery);
                usernameSelectPS.setInt(1, this.getUserID());
                usernameSelectRS = usernameSelectPS.executeQuery();
                if(usernameSelectRS.next()) {
                    String oldUsername = usernameSelectRS.getString("Username");
                    //If new username is same as old, don't update database
                    if(newUsername.equals(oldUsername)) {
                        JOptionPane.showMessageDialog(null, "New username is the same as your old username.");
                    } else {
                        //See if username is already in-use
                        PreparedStatement usernameCheckPS;
                        ResultSet usernameCheckRS;
                        String usernameCheckQuery = "SELECT * FROM Users WHERE Username=?";
                        usernameCheckPS = MyConnection.getConnection().prepareStatement(usernameCheckQuery);
                        usernameCheckPS.setString(1, newUsername);
                        usernameCheckRS = usernameCheckPS.executeQuery();
                        //If new username is already being used by another account, don't update database
                        if(usernameCheckRS.next()) {
                            JOptionPane.showMessageDialog(null, "Username already in use by another account.");
                        } else {
                            //Update database to have new username
                            PreparedStatement updateUsernamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET Username=? WHERE UserID=?");
                            updateUsernamePreparedStatement.setString(1, newUsername);
                            updateUsernamePreparedStatement.setInt(2, this.getUserID());
                            updateUsernamePreparedStatement.executeUpdate();
                            this.setAdminUsername(newUsername);
                        }
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void SwitchToViewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwitchToViewsActionPerformed
        switchPanels(sponsorView);
    }//GEN-LAST:event_SwitchToViewsActionPerformed

    private void ViewSponsorPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewSponsorPageActionPerformed
        try {
            if(selectedCompanyID != -1) {
                PreparedStatement companyDriverPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Users JOIN Company ON Company.CompanyTestSponsorID=Users.UserID JOIN Sponsor ON Sponsor.UserID=Company.CompanyTestSponsorID WHERE Company.CompanyID=?");
                companyDriverPS.setInt(1, selectedCompanyID);
                ResultSet companyDriverRS = companyDriverPS.executeQuery();
                if(companyDriverRS.next()) {
                    SponsorGUI sponsorGUI = new SponsorGUI();
                    sponsorGUI.setLoggingIn(true);
                    sponsorGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    sponsorGUI.setTitle("Good Driver Incentive Program - Test Driver");
                    sponsorGUI.setUserID(companyDriverRS.getInt("UserID"));
                    String fullName = companyDriverRS.getString("FirstName") + " " + companyDriverRS.getString("MiddleName") + " " + companyDriverRS.getString("LastName");
                    sponsorGUI.setSponsorName(fullName);
                    sponsorGUI.setSponsorUsername(companyDriverRS.getString("Username"));
                    String preferredName = companyDriverRS.getString("PreferredName");
                    sponsorGUI.setSponsorPreferredName(preferredName);
                    sponsorGUI.setSponsorPassword("password");

                    int pointToDollarRatio = 100;
                    //Query database for company's point to dollar conversion ratio
                    PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID=?");
                    sponsorPS.setInt(1, companyDriverRS.getInt("UserID"));
                    ResultSet sponsorRS = sponsorPS.executeQuery();
                    if(sponsorRS.next()) {
                        int companyID = sponsorRS.getInt("CompanyID");
                        PreparedStatement pointToDollarConversionPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                        pointToDollarConversionPS.setInt(1, companyID);
                        ResultSet pointToDollarConversionRS = pointToDollarConversionPS.executeQuery();
                        if(pointToDollarConversionRS.next()) {
                            pointToDollarRatio = pointToDollarConversionRS.getInt("PointToDollar");
                        }
                        sponsorGUI.showCatalogItems(companyID);
                    }
                    sponsorGUI.setCompanyPointToDollarRatio(String.valueOf(pointToDollarRatio));
                    sponsorGUI.formatCatalogItemTables();
                    sponsorGUI.updateCatalogItemTable();
                    sponsorGUI.setCompanyDriverList(companyDriverRS.getInt("UserID"));
                    sponsorGUI.setLoggingIn(false);
                    sponsorGUI.setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please make a company selection.");
            }
        } catch(Exception e) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
        } 
    }//GEN-LAST:event_ViewSponsorPageActionPerformed

    private void ViewDriverPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDriverPageActionPerformed
        try {
            if(selectedCompanyID != -1) {
                PreparedStatement companyDriverPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Users JOIN Company ON Company.CompanyTestDriverID=Users.UserID JOIN Driver ON Driver.UserID=Company.CompanyTestDriverID WHERE Company.CompanyID=?");
                companyDriverPS.setInt(1, selectedCompanyID);
                ResultSet companyDriverRS = companyDriverPS.executeQuery();
                if(companyDriverRS.next()) {
                    DriverGUI driverGUI = new DriverGUI();
                    driverGUI.setLoggingIn(true);
                    driverGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    driverGUI.setTitle("Good Driver Incentive Program - Test Driver");
                    driverGUI.switchPanels(driverGUI.getProfilePanel());
                    driverGUI.setUserID(companyDriverRS.getInt("UserID"));
                    String fullName = companyDriverRS.getString("FirstName") + " " + companyDriverRS.getString("MiddleName") + " " + companyDriverRS.getString("LastName");
                    driverGUI.setDriverName(fullName);
                    driverGUI.setDriverUsername(companyDriverRS.getString("Username"));
                    String preferredName = companyDriverRS.getString("PreferredName");
                    driverGUI.setDriverPreferredName(preferredName);
                    driverGUI.setDriverPassword("password");
                    driverGUI.formatCartItemTable();
                    driverGUI.setSponsorCatalogList(companyDriverRS.getInt("UserID"));
                    driverGUI.setApplicationCompanyList(companyDriverRS.getInt("UserID"));
                    driverGUI.setApplicationTable();
                    driverGUI.setDriverAddress(companyDriverRS.getString("Address"));
                    driverGUI.removeFunctionality();
                    driverGUI.setLoggingIn(false);
                    driverGUI.setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please make a company selection.");
            }
        } catch(Exception e) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_ViewDriverPageActionPerformed

    private void SponsorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SponsorListValueChanged
        String selectedCompany = SponsorList.getSelectedValue();
        String[] tokens = selectedCompany.split(": ");
        selectedCompanyID = Integer.parseInt(tokens[0]);
    }//GEN-LAST:event_SponsorListValueChanged

    private void CreateCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCompanyButtonActionPerformed
        CreateCompany createCompanyFrame = new CreateCompany();
        createCompanyFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createCompanyFrame.setTitle("Good Driver Incentive Program - Create Company");
        createCompanyFrame.setVisible(true);
    }//GEN-LAST:event_CreateCompanyButtonActionPerformed

    private void CreateDriverButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDriverButton1ActionPerformed
        AddDriver addDriverFrame = new AddDriver();
        addDriverFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        addDriverFrame.setTitle("Good Driver Incentive Program - Add Driver");
        try {
            addDriverFrame.setCompanyList();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            addDriverFrame.setDriverList();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        addDriverFrame.setVisible(true);
    }//GEN-LAST:event_CreateDriverButton1ActionPerformed

    private void salesBySponsorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesBySponsorButtonActionPerformed
        switchReportPanels(salesBySponsorPanel);
    }//GEN-LAST:event_salesBySponsorButtonActionPerformed

    private void salesByDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesByDriverButtonActionPerformed
        switchReportPanels(salesByDriverPanel);
    }//GEN-LAST:event_salesByDriverButtonActionPerformed

    private void invoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceButtonActionPerformed
        switchReportPanels(invoicePanel);
         try {
            companyDD.addItem("0: All Companies");
            PreparedStatement companiesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company");
            ResultSet companiesRS = companiesPS.executeQuery();
            while(companiesRS.next()) {
                String company = companiesRS.getInt("CompanyID") + ": " + companiesRS.getString("CompanyName");
                companyDD.addItem(company);
            }
         } catch(Exception e) {
             Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, e);
         }
    }//GEN-LAST:event_invoiceButtonActionPerformed

    private void auditLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auditLogButtonActionPerformed
        switchReportPanels(auditLogPanel);
    }//GEN-LAST:event_auditLogButtonActionPerformed

    
    private void invoiceGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceGenerateButtonActionPerformed
        //Make sure a company is selected
        if(companyDD.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please make a company selection.");
        } else {
            DefaultTableModel model = (DefaultTableModel) invoiceTable.getModel();
            //Remove existing rows
            if(model.getRowCount() > 0) {
                for(int i = model.getRowCount()-1; i >= 0; i--) {
                    model.removeRow(i);
                }
            }
            try{
                String selectedCompany = companyDD.getSelectedItem().toString();
                String[] tokens = selectedCompany.split(": ");
                //Get information for all companies
                if(tokens[0].equals("0")) {
                    ArrayList<String> companyNameList = new ArrayList<>();
                    ArrayList<Double> totalDriverCostList = new ArrayList<>();
                    ArrayList<Double> adminFeeList = new ArrayList<>();
                    //Get information from all companies
                    PreparedStatement companiesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company");
                    ResultSet companiesRS = companiesPS.executeQuery();
                    while(companiesRS.next()) {
                        companyNameList.add(companiesRS.getString("CompanyName"));
                        int companyID = companiesRS.getInt("CompanyID");
                        String fromDate = fromDateText.getText();
                        String toDate = toDateText.getText();
                        //If no dates were specified
                        if(fromDate.equals("") && toDate.equals("")) {
                            PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=?");
                            purchasesPS.setInt(1, companyID);
                            ResultSet purchasesRS = purchasesPS.executeQuery();
                            //If purchases were made in the timeframe
                            if(purchasesRS.next()) {
                                double totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                                double adminFee = totalDriverCost * 0.01;
                                totalDriverCostList.add(totalDriverCost);
                                adminFeeList.add(adminFee);
                            //If no purchases were made in the timeframe
                            } else {
                                totalDriverCostList.add(0.0);
                                adminFeeList.add(0.0);
                            }
                        //If a from date was specified but no to date
                        } else if(!fromDate.equals("") && toDate.equals("")) {
                            PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate >= ?");
                            purchasesPS.setInt(1, companyID);
                            purchasesPS.setString(2, fromDate);
                            ResultSet purchasesRS = purchasesPS.executeQuery();
                            //If purchases were made in the timeframe
                            if(purchasesRS.next()) {
                                double totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                                double adminFee = totalDriverCost * 0.01;
                                totalDriverCostList.add(totalDriverCost);
                                adminFeeList.add(adminFee);
                            //If no purchases were made in the timeframe
                            } else {
                                totalDriverCostList.add(0.0);
                                adminFeeList.add(0.0);
                            }
                        //If a to date was specified but no from date
                        } else if(fromDate.equals("") && !toDate.equals("")) {
                            PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate <= ?");
                            purchasesPS.setInt(1, companyID);
                            purchasesPS.setString(2, toDate);
                            ResultSet purchasesRS = purchasesPS.executeQuery();
                            //If purchases were made in the timeframe
                            if(purchasesRS.next()) {
                                double totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                                double adminFee = totalDriverCost * 0.01;
                                totalDriverCostList.add(totalDriverCost);
                                adminFeeList.add(adminFee);
                            //If no purchases were made in the timeframe
                            } else {
                                totalDriverCostList.add(0.0);
                                adminFeeList.add(0.0);
                            }
                        //If both dates were specified
                        } else if(!fromDate.equals("") && !toDate.equals("")) {
                            PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate <= ? AND PurchaseDate >= ?");
                            purchasesPS.setInt(1, companyID);
                            purchasesPS.setString(2, toDate);
                            purchasesPS.setString(3, fromDate);
                            ResultSet purchasesRS = purchasesPS.executeQuery();
                            //If purchases were made in the timeframe
                            if(purchasesRS.next()) {
                                double totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                                double adminFee = totalDriverCost * 0.01;
                                totalDriverCostList.add(totalDriverCost);
                                adminFeeList.add(adminFee);
                            //If no purchases were made in the timeframe
                            } else {
                                totalDriverCostList.add(0.0);
                                adminFeeList.add(0.0);
                            }
                        }
                    }
                    //Add all company data to table
                    for(int i = 0; i < companyNameList.size(); i++) {
                        Object[] rowData = {companyNameList.get(i), totalDriverCostList.get(i), adminFeeList.get(i)};
                        model.addRow(rowData);
                    }
                //Get information for specific company selected
                } else {
                    int companyID = Integer.parseInt(tokens[0]);
                    String companyName = tokens[1];
                    double totalDriverCost = 0.0;
                    double adminFee = 0.0;
                    String fromDate = fromDateText.getText();
                    String toDate = toDateText.getText();
                    //If no dates were specified
                    if(fromDate.equals("") && toDate.equals("")) {
                        PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=?");
                        purchasesPS.setInt(1, companyID);
                        ResultSet purchasesRS = purchasesPS.executeQuery();
                        //If purchases were made in the timeframe
                        if(purchasesRS.next()) {
                            totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                            adminFee = totalDriverCost * 0.01;
                        }
                    //If a from date was specified but no to date
                    } else if(!fromDate.equals("") && toDate.equals("")) {
                        PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate >= ?");
                        purchasesPS.setInt(1, companyID);
                        purchasesPS.setString(2, fromDate);
                        ResultSet purchasesRS = purchasesPS.executeQuery();
                        //If purchases were made in the timeframe
                        if(purchasesRS.next()) {
                            totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                            adminFee = totalDriverCost * 0.01;
                        }
                    //If a to date was specified but no from date
                    } else if(fromDate.equals("") && !toDate.equals("")) {
                        PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate <= ?");
                        purchasesPS.setInt(1, companyID);
                        purchasesPS.setString(2, toDate);
                        ResultSet purchasesRS = purchasesPS.executeQuery();
                        //If purchases were made in the timeframe
                        if(purchasesRS.next()) {
                            totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                            adminFee = totalDriverCost * 0.01;
                        }
                    //If both dates were specified
                    } else if(!fromDate.equals("") && !toDate.equals("")) {
                        PreparedStatement purchasesPS = MyConnection.getConnection().prepareStatement("SELECT SUM(MonetaryCost) FROM CatalogPurchases WHERE CompanyID=? AND PurchaseDate <= ? AND PurchaseDate >= ?");
                        purchasesPS.setInt(1, companyID);
                        purchasesPS.setString(2, toDate);
                        purchasesPS.setString(3, fromDate);
                        ResultSet purchasesRS = purchasesPS.executeQuery();
                        //If purchases were made in the timeframe
                        if(purchasesRS.next()) {
                            totalDriverCost = purchasesRS.getDouble("SUM(MonetaryCost)");
                            adminFee = totalDriverCost * 0.01;
                        }
                    }
                    Object[] rowData = {companyName, totalDriverCost, adminFee};
                    model.addRow(rowData);
                }
            } catch(Exception e) {
                Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_invoiceGenerateButtonActionPerformed

    private void driverApplicationsGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverApplicationsGenerateButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) driverApplicationsReportTable.getModel();
        //Remove existing rows
        if(model.getRowCount() > 0) {
            for(int i = model.getRowCount()-1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
        try{
            String fromDate = fromDateTextDA.getText();
            String toDate = toDateTextDA.getText();
            //If no dates were specified
            if(fromDate.equals("") && toDate.equals("")) {
                PreparedStatement driverApplicationPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverApplications JOIN Company ON DriverApplications.CompanyID=Company.CompanyID JOIN Driver ON DriverApplications.DriverID=Driver.DriverID JOIN Users ON Driver.UserID=Users.UserID");
                ResultSet driverApplicationRS = driverApplicationPS.executeQuery();
                //If applications were made in the timeframe
                while(driverApplicationRS.next()) {
                    Object[] rowData = {driverApplicationRS.getString("ApplicationDate").split(" ")[0], driverApplicationRS.getString("CompanyName"), driverApplicationRS.getString("FirstName") + " " + driverApplicationRS.getString("LastName"), driverApplicationRS.getString("ApplicationStatus"), driverApplicationRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If a from date was specified but no to date
            } else if(!fromDate.equals("") && toDate.equals("")) {
                PreparedStatement driverApplicationPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverApplications JOIN Company ON DriverApplications.CompanyID=Company.CompanyID JOIN Driver ON DriverApplications.DriverID=Driver.DriverID JOIN Users ON Driver.UserID=Users.UserID WHERE ApplicationDate >= ?");
                driverApplicationPS.setString(1, fromDate);
                ResultSet driverApplicationRS = driverApplicationPS.executeQuery();
                //If applications were made in the timeframe
                while(driverApplicationRS.next()) {
                    Object[] rowData = {driverApplicationRS.getString("ApplicationDate").split(" ")[0], driverApplicationRS.getString("CompanyName"), driverApplicationRS.getString("FirstName") + " " + driverApplicationRS.getString("LastName"), driverApplicationRS.getString("ApplicationStatus"), driverApplicationRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If a to date was specified but no from date
            } else if(fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement driverApplicationPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverApplications JOIN Company ON DriverApplications.CompanyID=Company.CompanyID JOIN Driver ON DriverApplications.DriverID=Driver.DriverID JOIN Users ON Driver.UserID=Users.UserID WHERE ApplicationDate <= ?");
                driverApplicationPS.setString(1, toDate);
                ResultSet driverApplicationRS = driverApplicationPS.executeQuery();
                //If applications were made in the timeframe
                while(driverApplicationRS.next()) {
                    Object[] rowData = {driverApplicationRS.getString("ApplicationDate").split(" ")[0], driverApplicationRS.getString("CompanyName"), driverApplicationRS.getString("FirstName") + " " + driverApplicationRS.getString("LastName"), driverApplicationRS.getString("ApplicationStatus"), driverApplicationRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If both dates were specified
            } else if(!fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement driverApplicationPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverApplications JOIN Company ON DriverApplications.CompanyID=Company.CompanyID JOIN Driver ON DriverApplications.DriverID=Driver.DriverID JOIN Users ON Driver.UserID=Users.UserID WHERE ApplicationDate >= ? AND ApplicationDate <= ?");
                driverApplicationPS.setString(1, fromDate);
                driverApplicationPS.setString(2, toDate);
                ResultSet driverApplicationRS = driverApplicationPS.executeQuery();
                //If applications were made in the timeframe
                while(driverApplicationRS.next()) {
                    Object[] rowData = {driverApplicationRS.getString("ApplicationDate").split(" ")[0], driverApplicationRS.getString("CompanyName"), driverApplicationRS.getString("FirstName") + " " + driverApplicationRS.getString("LastName"), driverApplicationRS.getString("ApplicationStatus"), driverApplicationRS.getString("Reason")};
                    model.addRow(rowData);
                }
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_driverApplicationsGenerateButtonActionPerformed

    private void driverApplicationsReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverApplicationsReportButtonActionPerformed
        switchAuditLogPanels(driverApplicationsReportPanel);
    }//GEN-LAST:event_driverApplicationsReportButtonActionPerformed

    private void pointChangesReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointChangesReportButtonActionPerformed
        switchAuditLogPanels(pointChangesReportPanel);
    }//GEN-LAST:event_pointChangesReportButtonActionPerformed

    private void pointChangesGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointChangesGenerateButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) pointChangesReportTable.getModel();
        //Remove existing rows
        if(model.getRowCount() > 0) {
            for(int i = model.getRowCount()-1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
        try{
            String fromDate = fromDateTextPC.getText();
            String toDate = toDateTextPC.getText();
            //If no dates were specified
            if(fromDate.equals("") && toDate.equals("")) {
                PreparedStatement pointChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PointChanges JOIN Company ON PointChanges.CompanyID=Company.CompanyID JOIN Driver ON PointChanges.DriverID=Driver.DriverID JOIN Users ON Driver.UserID = Users.UserID");
                ResultSet pointChangesRS = pointChangesPS.executeQuery();
                //If points were changed in the timeframe
                while(pointChangesRS.next()) {
                    Object[] rowData = {pointChangesRS.getString("PointChangeDate").split(" ")[0], pointChangesRS.getString("CompanyName"), pointChangesRS.getString("FirstName") + " " + pointChangesRS.getString("LastName"), pointChangesRS.getInt("PointChange"), pointChangesRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If a from date was specified but no to date
            } else if(!fromDate.equals("") && toDate.equals("")) {
                PreparedStatement pointChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PointChanges JOIN Company ON PointChanges.CompanyID=Company.CompanyID JOIN Driver ON PointChanges.DriverID=Driver.DriverID JOIN Users ON Driver.UserID = Users.UserID WHERE PointChangeDate >= ?");
                pointChangesPS.setString(1, fromDate);
                ResultSet pointChangesRS = pointChangesPS.executeQuery();
                //If points were changed in the timeframe
                while(pointChangesRS.next()) {
                    Object[] rowData = {pointChangesRS.getString("PointChangeDate").split(" ")[0], pointChangesRS.getString("CompanyName"), pointChangesRS.getString("FirstName") + " " + pointChangesRS.getString("LastName"), pointChangesRS.getInt("PointChange"), pointChangesRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If a to date was specified but no from date
            } else if(fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement pointChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PointChanges JOIN Company ON PointChanges.CompanyID=Company.CompanyID JOIN Driver ON PointChanges.DriverID=Driver.DriverID JOIN Users ON Driver.UserID = Users.UserID WHERE PointChangeDate <= ?");
                pointChangesPS.setString(1, toDate);
                ResultSet pointChangesRS = pointChangesPS.executeQuery();
                //If points were changed in the timeframe
                while(pointChangesRS.next()) {
                    Object[] rowData = {pointChangesRS.getString("PointChangeDate").split(" ")[0], pointChangesRS.getString("CompanyName"), pointChangesRS.getString("FirstName") + " " + pointChangesRS.getString("LastName"), pointChangesRS.getInt("PointChange"), pointChangesRS.getString("Reason")};
                    model.addRow(rowData);
                }
            //If both dates were specified
            } else if(!fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement pointChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PointChanges JOIN Company ON PointChanges.CompanyID=Company.CompanyID JOIN Driver ON PointChanges.DriverID=Driver.DriverID JOIN Users ON Driver.UserID = Users.UserID WHERE PointChangeDate >= ? AND PointChangeDate <= ?");
                pointChangesPS.setString(1, fromDate);
                pointChangesPS.setString(2, toDate);
                ResultSet pointChangesRS = pointChangesPS.executeQuery();
                //If points were changed in the timeframe
                while(pointChangesRS.next()) {
                    Object[] rowData = {pointChangesRS.getString("PointChangeDate").split(" ")[0], pointChangesRS.getString("CompanyName"), pointChangesRS.getString("FirstName") + " " + pointChangesRS.getString("LastName"), pointChangesRS.getInt("PointChange"), pointChangesRS.getString("Reason")};
                    model.addRow(rowData);
                }
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_pointChangesGenerateButtonActionPerformed

    private void passwordChangesReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordChangesReportButtonActionPerformed
        switchAuditLogPanels(passwordChangesReportPanel);
    }//GEN-LAST:event_passwordChangesReportButtonActionPerformed

    private void passwordChangesGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordChangesGenerateButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) passwordChangesReportTable.getModel();
        //Remove existing rows
        if(model.getRowCount() > 0) {
            for(int i = model.getRowCount()-1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
        try{
            String fromDate = fromDateTextPass.getText();
            String toDate = toDateTextPass.getText();
            //If no dates were specified
            if(fromDate.equals("") && toDate.equals("")) {
                PreparedStatement passwordChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PasswordChange JOIN Users ON PasswordChange.UserChangedID=Users.UserID");
                ResultSet passwordChangesRS = passwordChangesPS.executeQuery();
                //If passwords were changed in the timeframe
                while(passwordChangesRS.next()) {
                    Object[] rowData = {passwordChangesRS.getString("PasswordChangeDate").split(" ")[0], passwordChangesRS.getString("FirstName") + " " + passwordChangesRS.getString("LastName"), passwordChangesRS.getString("PasswordChangeType")};
                    model.addRow(rowData);
                }
            //If a from date was specified but no to date
            } else if(!fromDate.equals("") && toDate.equals("")) {
                PreparedStatement passwordChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PasswordChange JOIN Users ON PasswordChange.UserChangedID=Users.UserID WHERE PasswordChangeDate >= ?");
                passwordChangesPS.setString(1, fromDate);
                ResultSet passwordChangesRS = passwordChangesPS.executeQuery();
                //If passwords were changed in the timeframe
                while(passwordChangesRS.next()) {
                    Object[] rowData = {passwordChangesRS.getString("PasswordChangeDate").split(" ")[0], passwordChangesRS.getString("FirstName") + " " + passwordChangesRS.getString("LastName"), passwordChangesRS.getString("PasswordChangeType")};
                    model.addRow(rowData);
                }
            //If a to date was specified but no from date
            } else if(fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement passwordChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PasswordChange JOIN Users ON PasswordChange.UserChangedID=Users.UserID WHERE PasswordChangeDate <= ?");
                passwordChangesPS.setString(1, toDate);
                ResultSet passwordChangesRS = passwordChangesPS.executeQuery();
                //If passwords were changed in the timeframe
                while(passwordChangesRS.next()) {
                    Object[] rowData = {passwordChangesRS.getString("PasswordChangeDate").split(" ")[0], passwordChangesRS.getString("FirstName") + " " + passwordChangesRS.getString("LastName"), passwordChangesRS.getString("PasswordChangeType")};
                    model.addRow(rowData);
                }
            //If both dates were specified
            } else if(!fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement passwordChangesPS = MyConnection.getConnection().prepareStatement("SELECT * FROM PasswordChange JOIN Users ON PasswordChange.UserChangedID=Users.UserID WHERE PasswordChangeDate >= ? AND PasswordChangeDate <= ?");
                passwordChangesPS.setString(1, fromDate);
                passwordChangesPS.setString(2, toDate);
                ResultSet passwordChangesRS = passwordChangesPS.executeQuery();
                //If passwords were changed in the timeframe
                while(passwordChangesRS.next()) {
                    Object[] rowData = {passwordChangesRS.getString("PasswordChangeDate").split(" ")[0], passwordChangesRS.getString("FirstName") + " " + passwordChangesRS.getString("LastName"), passwordChangesRS.getString("PasswordChangeType")};
                    model.addRow(rowData);
                }
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_passwordChangesGenerateButtonActionPerformed

    private void loginAttemptsGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginAttemptsGenerateButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) loginAttemptsReportTable.getModel();
        //Remove existing rows
        if(model.getRowCount() > 0) {
            for(int i = model.getRowCount()-1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
        try{
            String fromDate = fromDateTextLA.getText();
            String toDate = toDateTextLA.getText();
            //If no dates were specified
            if(fromDate.equals("") && toDate.equals("")) {
                PreparedStatement loginAttemptsPS = MyConnection.getConnection().prepareStatement("SELECT * FROM LoginAttempts");
                ResultSet loginAttemptsRS = loginAttemptsPS.executeQuery();
                //If logins occurred in the timeframe
                while(loginAttemptsRS.next()) {
                    String condition = "Failure";
                    if(loginAttemptsRS.getInt("Success") == 1) {
                        condition = "Success";
                    }
                    Object[] rowData = {loginAttemptsRS.getString("LoginAttemptsDate").split(" ")[0], loginAttemptsRS.getString("Username"), condition};
                    model.addRow(rowData);
                }
            //If a from date was specified but no to date
            } else if(!fromDate.equals("") && toDate.equals("")) {
                PreparedStatement loginAttemptsPS = MyConnection.getConnection().prepareStatement("SELECT * FROM LoginAttempts WHERE LoginAttemptsDate >= ?");
                loginAttemptsPS.setString(1, fromDate);
                ResultSet loginAttemptsRS = loginAttemptsPS.executeQuery();
                //If logins occurred in the timeframe
                while(loginAttemptsRS.next()) {
                    String condition = "Failure";
                    if(loginAttemptsRS.getInt("Success") == 1) {
                        condition = "Success";
                    }
                    Object[] rowData = {loginAttemptsRS.getString("LoginAttemptsDate").split(" ")[0], loginAttemptsRS.getString("Username"), condition};
                    model.addRow(rowData);
                }
            //If a to date was specified but no from date
            } else if(fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement loginAttemptsPS = MyConnection.getConnection().prepareStatement("SELECT * FROM LoginAttempts WHERE LoginAttemptsDate <= ?");
                loginAttemptsPS.setString(1, toDate);
                ResultSet loginAttemptsRS = loginAttemptsPS.executeQuery();
                //If logins occurred in the timeframe
                while(loginAttemptsRS.next()) {
                    String condition = "Failure";
                    if(loginAttemptsRS.getInt("Success") == 1) {
                        condition = "Success";
                    }
                    Object[] rowData = {loginAttemptsRS.getString("LoginAttemptsDate").split(" ")[0], loginAttemptsRS.getString("Username"), condition};
                    model.addRow(rowData);
                }
            //If both dates were specified
            } else if(!fromDate.equals("") && !toDate.equals("")) {
                PreparedStatement loginAttemptsPS = MyConnection.getConnection().prepareStatement("SELECT * FROM LoginAttempts WHERE LoginAttemptsDate >= ? AND LoginAttemptsDate <= ?");
                loginAttemptsPS.setString(1, fromDate);
                loginAttemptsPS.setString(2, toDate);
                ResultSet loginAttemptsRS = loginAttemptsPS.executeQuery();
                //If logins occurred in the timeframe
                while(loginAttemptsRS.next()) {
                    String condition = "Failure";
                    if(loginAttemptsRS.getInt("Success") == 1) {
                        condition = "Success";
                    }
                    Object[] rowData = {loginAttemptsRS.getString("LoginAttemptsDate").split(" ")[0], loginAttemptsRS.getString("Username"), condition};
                    model.addRow(rowData);
                }
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_loginAttemptsGenerateButtonActionPerformed

    private void loginAttemptsReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginAttemptsReportButtonActionPerformed
        switchAuditLogPanels(loginAttemptsReportPanel);
    }//GEN-LAST:event_loginAttemptsReportButtonActionPerformed

    private void driverApplicationsCreatePDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverApplicationsCreatePDFButtonActionPerformed
        try {
            Document report = new Document();
            PdfWriter writer = PdfWriter.getInstance(report, new FileOutputStream("DriverApplicationsAuditLogReport.pdf"));
            report.open();
            Paragraph title = new Paragraph();
            title.add(new Paragraph("Driver Application Audit Log Report"));
            title.add(new Paragraph(" "));
            String constraints = "";
            if(!fromDateTextDA.getText().equals("")) {
                constraints += "From: ";
                constraints += fromDateTextDA.getText();
                constraints += " ";
            }
            if(!toDateTextDA.getText().equals("")) {
                constraints += "To: ";
                constraints += toDateTextDA.getText();
                constraints += " ";
            }
            if(!constraints.equals("")) {
                title.add(new Paragraph(constraints));
                title.add(new Paragraph(" "));
            }
            report.add(title);
            PdfPTable reportTable = new PdfPTable(driverApplicationsReportTable.getModel().getColumnCount());
            for(int i = 0; i < driverApplicationsReportTable.getModel().getColumnCount(); i++) {
                PdfPCell cell = new PdfPCell(new Phrase(driverApplicationsReportTable.getModel().getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
            }
            for(int i = 0; i < driverApplicationsReportTable.getModel().getRowCount(); i++) {
                for(int j = 0; j < driverApplicationsReportTable.getModel().getColumnCount(); j++) {
                    PdfPCell cell = new PdfPCell(new Phrase(driverApplicationsReportTable.getModel().getValueAt(i, j).toString()));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    reportTable.addCell(cell);
                }
            }
            report.add(reportTable);
            report.close();
        } catch (Exception ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_driverApplicationsCreatePDFButtonActionPerformed

    private void pointChangesCreatePDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointChangesCreatePDFButtonActionPerformed
        try {
            Document report = new Document();
            PdfWriter writer = PdfWriter.getInstance(report, new FileOutputStream("PointChangesAuditLogReport.pdf"));
            report.open();
            Paragraph title = new Paragraph();
            title.add(new Paragraph("Point Changes Audit Log Report"));
            title.add(new Paragraph(" "));
            String constraints = "";
            if(!fromDateTextPC.getText().equals("")) {
                constraints += "From: ";
                constraints += fromDateTextPC.getText();
                constraints += " ";
            }
            if(!toDateTextPC.getText().equals("")) {
                constraints += "To: ";
                constraints += toDateTextPC.getText();
                constraints += " ";
            }
            if(!constraints.equals("")) {
                title.add(new Paragraph(constraints));
                title.add(new Paragraph(" "));
            }
            report.add(title);
            PdfPTable reportTable = new PdfPTable(pointChangesReportTable.getModel().getColumnCount());
            for(int i = 0; i < pointChangesReportTable.getModel().getColumnCount(); i++) {
                PdfPCell cell = new PdfPCell(new Phrase(pointChangesReportTable.getModel().getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
            }
            for(int i = 0; i < pointChangesReportTable.getModel().getRowCount(); i++) {
                for(int j = 0; j < pointChangesReportTable.getModel().getColumnCount(); j++) {
                    PdfPCell cell = new PdfPCell(new Phrase(pointChangesReportTable.getModel().getValueAt(i, j).toString()));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    reportTable.addCell(cell);
                }
            }
            report.add(reportTable);
            report.close();
        } catch (Exception ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pointChangesCreatePDFButtonActionPerformed

    private void passwordChangesCreatePDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordChangesCreatePDFButtonActionPerformed
        try {
            Document report = new Document();
            PdfWriter writer = PdfWriter.getInstance(report, new FileOutputStream("PasswordChangesAuditLogReport.pdf"));
            report.open();
            Paragraph title = new Paragraph();
            title.add(new Paragraph("Password Changes Audit Log Report"));
            title.add(new Paragraph(" "));
            String constraints = "";
            if(!fromDateTextPass.getText().equals("")) {
                constraints += "From: ";
                constraints += fromDateTextPass.getText();
                constraints += " ";
            }
            if(!toDateTextPass.getText().equals("")) {
                constraints += "To: ";
                constraints += toDateTextPass.getText();
                constraints += " ";
            }
            if(!constraints.equals("")) {
                title.add(new Paragraph(constraints));
                title.add(new Paragraph(" "));
            }
            report.add(title);
            PdfPTable reportTable = new PdfPTable(passwordChangesReportTable.getModel().getColumnCount());
            for(int i = 0; i < passwordChangesReportTable.getModel().getColumnCount(); i++) {
                PdfPCell cell = new PdfPCell(new Phrase(passwordChangesReportTable.getModel().getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
            }
            for(int i = 0; i < passwordChangesReportTable.getModel().getRowCount(); i++) {
                for(int j = 0; j < passwordChangesReportTable.getModel().getColumnCount(); j++) {
                    PdfPCell cell = new PdfPCell(new Phrase(passwordChangesReportTable.getModel().getValueAt(i, j).toString()));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    reportTable.addCell(cell);
                }
            }
            report.add(reportTable);
            report.close();
        } catch (Exception ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_passwordChangesCreatePDFButtonActionPerformed

    private void loginAttemptsCreatePDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginAttemptsCreatePDFButtonActionPerformed
        try {
            Document report = new Document();
            PdfWriter writer = PdfWriter.getInstance(report, new FileOutputStream("LoginAttemptsAuditLogReport.pdf"));
            report.open();
            Paragraph title = new Paragraph();
            title.add(new Paragraph("Login Attempts Audit Log Report"));
            title.add(new Paragraph(" "));
            String constraints = "";
            if(!fromDateTextLA.getText().equals("")) {
                constraints += "From: ";
                constraints += fromDateTextLA.getText();
                constraints += " ";
            }
            if(!toDateTextLA.getText().equals("")) {
                constraints += "To: ";
                constraints += toDateTextLA.getText();
                constraints += " ";
            }
            if(!constraints.equals("")) {
                title.add(new Paragraph(constraints));
                title.add(new Paragraph(" "));
            }
            report.add(title);
            PdfPTable reportTable = new PdfPTable(loginAttemptsReportTable.getModel().getColumnCount());
            for(int i = 0; i < loginAttemptsReportTable.getModel().getColumnCount(); i++) {
                PdfPCell cell = new PdfPCell(new Phrase(loginAttemptsReportTable.getModel().getColumnName(i)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
            }
            for(int i = 0; i < loginAttemptsReportTable.getModel().getRowCount(); i++) {
                for(int j = 0; j < loginAttemptsReportTable.getModel().getColumnCount(); j++) {
                    PdfPCell cell = new PdfPCell(new Phrase(loginAttemptsReportTable.getModel().getValueAt(i, j).toString()));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    reportTable.addCell(cell);
                }
            }
            report.add(reportTable);
            report.close();
        } catch (Exception ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loginAttemptsCreatePDFButtonActionPerformed

    private void invoiceCreatePDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceCreatePDFButtonActionPerformed
        try {
            ArrayList<String> companySelectedList = new ArrayList();
            String companySelected = companyDD.getSelectedItem().toString();
            if(companySelected.split(": ")[0].equals("0")) {
                PreparedStatement companyPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company");
                ResultSet companyRS = companyPS.executeQuery();
                while(companyRS.next()) {
                    companySelectedList.add("" + companyRS.getInt("CompanyID") + ": " + companyRS.getString("CompanyName"));
                }
            } else {
                companySelectedList.add(companySelected);
            }
            for(int m = 0; m < companySelectedList.size(); m++) {
                Document report = new Document();
                String fileName = companySelectedList.get(m).split(": ")[1];
                fileName = fileName.replace(" ", "_");
                PdfWriter writer = PdfWriter.getInstance(report, new FileOutputStream(fileName + "_Invoice_Report.pdf"));
                report.open();
                Paragraph title = new Paragraph();
                title.add(new Paragraph(companySelectedList.get(m).split(": ")[1] + " Invoice Report"));
                title.add(new Paragraph(" "));
                String constraints = "";
                if(!fromDateText.getText().equals("")) {
                    constraints += "From: ";
                    constraints += fromDateText.getText();
                    constraints += " ";
                }
                if(!toDateText.getText().equals("")) {
                    constraints += "To: ";
                    constraints += toDateText.getText();
                    constraints += " ";
                }
                if(!constraints.equals("")) {
                    title.add(new Paragraph(constraints));
                    title.add(new Paragraph(" "));
                }
                title.add(new Paragraph(invoiceTable.getModel().getValueAt(m, 0).toString() + " Total Amount Spent by Drivers: $" + String.format("%.2f", invoiceTable.getModel().getValueAt(m, 1))));
                title.add(new Paragraph(" "));
                title.add(new Paragraph(invoiceTable.getModel().getValueAt(m, 0).toString() + " Total Fee Due: $" + String.format("%.2f", invoiceTable.getModel().getValueAt(m, 2))));
                title.add(new Paragraph(" "));
                title.add(new Paragraph("Itemized"));
                title.add(new Paragraph(" "));
                report.add(title);
                PdfPTable reportTable = new PdfPTable(4);
                PdfPCell cell = new PdfPCell(new Phrase("Date"));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
                cell = new PdfPCell(new Phrase("Driver"));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
                cell = new PdfPCell(new Phrase("Purchase Amount"));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
                cell = new PdfPCell(new Phrase("Fee Amount"));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                reportTable.addCell(cell);
                if(fromDateText.getText().equals("") && toDateText.getText().equals("")) {
                    PreparedStatement purchaseInfoPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogPurchases JOIN Driver ON Driver.DriverID=CatalogPurchases.DriverID JOIN Users ON Users.UserID=Driver.UserID WHERE CompanyID=?");
                    purchaseInfoPS.setInt(1, Integer.parseInt(companySelectedList.get(m).split(": ")[0]));
                    ResultSet purchaseInfoRS = purchaseInfoPS.executeQuery();
                    while(purchaseInfoRS.next()) {
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("PurchaseDate").split(" ")[0]));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("FirstName") + " " + purchaseInfoRS.getString("LastName")));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", purchaseInfoRS.getDouble("MonetaryCost"))));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        double cost = purchaseInfoRS.getDouble("MonetaryCost");
                        double fee = cost * 0.01;
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", fee)));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                    }
                } else if(!fromDateText.getText().equals("") && toDateText.getText().equals("")) {
                    PreparedStatement purchaseInfoPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogPurchases JOIN Driver ON Driver.DriverID=CatalogPurchases.DriverID JOIN Users ON Users.UserID=Driver.UserID WHERE CompanyID=? AND PurchaseDate >= ?");
                    purchaseInfoPS.setInt(1, Integer.parseInt(companySelectedList.get(m).split(": ")[0]));
                    purchaseInfoPS.setString(2, fromDateText.getText());
                    ResultSet purchaseInfoRS = purchaseInfoPS.executeQuery();
                    while(purchaseInfoRS.next()) {
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("PurchaseDate").split(" ")[0]));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("FirstName") + " " + purchaseInfoRS.getString("LastName")));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", purchaseInfoRS.getDouble("MonetaryCost"))));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        double cost = purchaseInfoRS.getDouble("MonetaryCost");
                        double fee = cost * 0.01;
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", fee)));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                    }
                } else if(fromDateText.getText().equals("") && !toDateText.getText().equals("")) {
                    PreparedStatement purchaseInfoPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogPurchases JOIN Driver ON Driver.DriverID=CatalogPurchases.DriverID JOIN Users ON Users.UserID=Driver.UserID WHERE CompanyID=? AND PurchaseDate <= ?");
                    purchaseInfoPS.setInt(1, Integer.parseInt(companySelectedList.get(m).split(": ")[0]));
                    purchaseInfoPS.setString(2, toDateText.getText());
                    ResultSet purchaseInfoRS = purchaseInfoPS.executeQuery();
                    while(purchaseInfoRS.next()) {
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("PurchaseDate").split(" ")[0]));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("FirstName") + " " + purchaseInfoRS.getString("LastName")));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", purchaseInfoRS.getDouble("MonetaryCost"))));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        double cost = purchaseInfoRS.getDouble("MonetaryCost");
                        double fee = cost * 0.01;
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", fee)));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                    }
                } else if(!fromDateText.getText().equals("") && !toDateText.getText().equals("")) {
                    PreparedStatement purchaseInfoPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogPurchases JOIN Driver ON Driver.DriverID=CatalogPurchases.DriverID JOIN Users ON Users.UserID=Driver.UserID WHERE CompanyID=? AND PurchaseDate >= ? AND PurchaseDate <= ?");
                    purchaseInfoPS.setInt(1, Integer.parseInt(companySelectedList.get(m).split(": ")[0]));
                    purchaseInfoPS.setString(2, fromDateText.getText());
                    purchaseInfoPS.setString(3, toDateText.getText());
                    ResultSet purchaseInfoRS = purchaseInfoPS.executeQuery();
                    while(purchaseInfoRS.next()) {
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("PurchaseDate").split(" ")[0]));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase(purchaseInfoRS.getString("FirstName") + " " + purchaseInfoRS.getString("LastName")));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", purchaseInfoRS.getDouble("MonetaryCost"))));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                        double cost = purchaseInfoRS.getDouble("MonetaryCost");
                        double fee = cost * 0.01;
                        cell = new PdfPCell(new Phrase("$" + String.format("%.2f", fee)));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        reportTable.addCell(cell);
                    }
                }
                report.add(reportTable);
                report.close();
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_invoiceCreatePDFButtonActionPerformed

    private void CreateSponsorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateSponsorButtonActionPerformed
        AdminCreateSponsorAccount createAccountFrame = new AdminCreateSponsorAccount();
        createAccountFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAccountFrame.setTitle("Good Driver Incentive Program - Create Sponsor Account");
        createAccountFrame.setVisible(true);
    }//GEN-LAST:event_CreateSponsorButtonActionPerformed

    private void CreateAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateAdminButtonActionPerformed
        CreateAdminAccount createAccountFrame = new CreateAdminAccount();
        createAccountFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAccountFrame.setTitle("Good Driver Incentive Program - Create Admin Account");
        createAccountFrame.setVisible(true);
    }//GEN-LAST:event_CreateAdminButtonActionPerformed

    private void CreateDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDriverButtonActionPerformed
        CreateAccount createAccountFrame = new CreateAccount();
        createAccountFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAccountFrame.setTitle("Good Driver Incentive Program - Create Driver Account");
        createAccountFrame.setVisible(true);
    }//GEN-LAST:event_CreateDriverButtonActionPerformed

    private void updateUserInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUserInfoButtonActionPerformed
        try {
            //Get selected driver information
            String selectedUser = userAccountList.getSelectedValue();
            String[] tokens = selectedUser.split(":");
            int selectedUserID = Integer.parseInt(tokens[0]);
            //Check username for requirements
            Boolean unameCheck = false;
            String newUsername = userUsernameField.getText();
            //Check for valid username using regex (email)
            //https://howtodoinjava.com/java/regex/java-regex-validate-email-address/
            String usernameRegex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
            Pattern usernamePattern = Pattern.compile(usernameRegex);
            Matcher usernameMatcher = usernamePattern.matcher(newUsername);
            if(!usernameMatcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid username for user.", "Username Invalid", 2);
            } else {
                //See if username is already in-use
                PreparedStatement usernameCheckPS;
                ResultSet usernameCheckRS;
                String usernameCheckQuery = "SELECT * FROM Users WHERE Username=?";
                usernameCheckPS = MyConnection.getConnection().prepareStatement(usernameCheckQuery);
                usernameCheckPS.setString(1, newUsername);
                usernameCheckRS = usernameCheckPS.executeQuery();
                //If new username is already being used by another account, don't update database
                if(usernameCheckRS.next()) {
                    if(usernameCheckRS.getInt("UserID") != selectedUserID) {
                        JOptionPane.showMessageDialog(null, "Username already in use by another account.");
                    } else {
                        unameCheck = true;
                    }
                } else {
                    unameCheck = true;
                }
            }
            //Check password for requirements
            Boolean passCheck = false;
            String newPassword = userPasswordField.getText();
            //Check for valid password using regex
            //https://www.geeksforgeeks.org/how-to-validate-a-password-using-regular-expressions-in-java/
            String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,20}$"; 
            Pattern passwordPattern = Pattern.compile(passwordRegex);
            Matcher passwordMatcher = passwordPattern.matcher(newPassword);
            if(!passwordMatcher.matches()) {
                JOptionPane.showMessageDialog(null, "Password for driver must be 8-20 characters, have one uppercase, one lowercase, one digit, one special character, and no white space.");
            } else {
                passCheck = true;
            }
            //If both checks pass
            if(unameCheck && passCheck) {
                PreparedStatement updateUserInfoPS = MyConnection.getConnection().prepareStatement("UPDATE Users SET FirstName=?, LastName=?, PreferredName=?, Username=?, UserPassword=? WHERE UserID=?");
                updateUserInfoPS.setString(1, userFirstNameField.getText());
                updateUserInfoPS.setString(2, userLastNameField.getText());
                updateUserInfoPS.setString(3, userPreferredNameField.getText());
                updateUserInfoPS.setString(4, userUsernameField.getText());
                String pw_hash = BCrypt.hashpw(userPasswordField.getText(), BCrypt.gensalt());
                updateUserInfoPS.setString(5, pw_hash);
                updateUserInfoPS.setInt(6, selectedUserID);
                updateUserInfoPS.executeUpdate();
                //Record password change for audit loging
                PreparedStatement passwordChangePS = MyConnection.getConnection().prepareStatement("INSERT INTO PasswordChange (PasswordChangeDate, PasswordChangeType, UserChangedID, UserChangingID) VALUES (CURRENT_TIMESTAMP, ?, ?, ?)");
                passwordChangePS.setString(1, "change from admin");
                passwordChangePS.setInt(2, selectedUserID);
                passwordChangePS.setInt(3, this.getUserID());
                passwordChangePS.executeUpdate();
                setAdminUserList(userID);
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_updateUserInfoButtonActionPerformed

    private void userAccountListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userAccountListValueChanged
        // TODO add your handling code here:
        try {
            String selectedUser = userAccountList.getSelectedValue();
            if(selectedUser != null) {
                String[] tokens = selectedUser.split(":");
                int selectedUserID = Integer.parseInt(tokens[0]);
                PreparedStatement adminPS = MyConnection.getConnection().prepareStatement("SELECT Username, FirstName, LastName, PreferredName, UserPassword FROM Users where userID=?");
                adminPS.setInt(1, selectedUserID);
                ResultSet adminRS = adminPS.executeQuery();  
                adminRS.next();
                userFirstNameField.setText(adminRS.getString("FirstName"));
                userLastNameField.setText(adminRS.getString("LastName"));
                userPreferredNameField.setText(adminRS.getString("PreferredName"));
                userUsernameField.setText(adminRS.getString("Username"));
                userPasswordField.setText("password");
            } else {
                userFirstNameField.setText("");
                userLastNameField.setText("");
                userPreferredNameField.setText("");
                userUsernameField.setText("");
                userPasswordField.setText("");
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_userAccountListValueChanged

     //Helper Methods for getting and setting user information in the profile
    public void setAdminName(String name) {
        jTextField1.setText(name);
    }
    
    public void setAdminUsername(String username) {
        jTextField2.setText(username);
    }
    
    public void setAdminPreferredName(String preferredName) {
        jTextField3.setText(preferredName);
    }
    
    public void setAdminPassword(String password) {
        jPasswordField1.setText(password);
    }
    
    public void setUserID(int id) {
        userID = id;
    }
    
    public int getUserID() {
        return userID;
    }
    
    //Helper method to populate the sponsoring company list for catalog
    public void setSponsorViewList() throws SQLException {
        DefaultListModel model = new DefaultListModel(); //create a new list model

        PreparedStatement statement = MyConnection.getConnection().prepareStatement("Select * From Company");
        ResultSet resultSet = statement.executeQuery(); //run your query

        while (resultSet.next()) //go through each row that your query returns
        {
            String ItemList = resultSet.getInt("CompanyID") + ": " + resultSet.getString("CompanyName"); //get the element in column "item_code"
            model.addElement(ItemList); //add each item to the model
        }
        SponsorList.setModel(model);

        resultSet.close();
        statement.close();
    }
    
        public void setAdminUserList(int userID) {
        ArrayList<String> listDataArrayList = new ArrayList<String>();
        int driverCounter = 0;
        try {
            PreparedStatement usersForAdminPS = MyConnection.getConnection().prepareStatement("SELECT userID, Username, FirstName, LastName, PreferredName FROM Users WHERE userID!=?");
            usersForAdminPS.setInt(1, userID);
            ResultSet usersForAdminRS = usersForAdminPS.executeQuery();
            while(usersForAdminRS.next()) {
                listDataArrayList.add(usersForAdminRS.getInt("userID") + ": " + usersForAdminRS.getString("FirstName") + " " + usersForAdminRS.getString("LastName") + " (" + usersForAdminRS.getString("Username") + ")");
                driverCounter++;
            }
            if(driverCounter == 0) {
                String[] listData = {"No drivers available"};
                userAccountList.setListData(listData);
            } else {
                String[] listData = listDataArrayList.toArray(new String[listDataArrayList.size()]);
                userAccountList.setListData(listData);
            }
        } catch(Exception e) {
            Logger.getLogger(SponsorGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminGUI().setVisible(true);
            }
        });
    }
    
    public void switchPanels(javax.swing.JPanel panel)
    {
        layeredPane.removeAll();
        layeredPane.add(panel);
        layeredPane.repaint();
        layeredPane.revalidate();
    }
    
    public void switchReportPanels(javax.swing.JPanel panel) {
        reportingLayeredPane.removeAll();
        reportingLayeredPane.add(panel);
        reportingLayeredPane.repaint();
        reportingLayeredPane.revalidate();
    }
    
    public void switchAuditLogPanels(javax.swing.JPanel panel) {
        auditLogLayeredPanel.removeAll();
        auditLogLayeredPanel.add(panel);
        auditLogLayeredPanel.repaint();
        auditLogLayeredPanel.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateAdminButton;
    private javax.swing.JButton CreateCompanyButton;
    private javax.swing.JButton CreateDriverButton;
    private javax.swing.JButton CreateDriverButton1;
    private javax.swing.JButton CreateSponsorButton;
    private javax.swing.JList<String> SponsorList;
    private javax.swing.JButton SwitchToViews;
    private javax.swing.JButton ViewDriverPage;
    private javax.swing.JButton ViewSponsorPage;
    private javax.swing.JButton auditLogButton;
    private javax.swing.JLayeredPane auditLogLayeredPanel;
    private javax.swing.JPanel auditLogPanel;
    private javax.swing.JPanel catalog;
    private javax.swing.JComboBox<String> companyDD;
    private javax.swing.JButton driverApplicationsCreatePDFButton;
    private javax.swing.JButton driverApplicationsGenerateButton;
    private javax.swing.JButton driverApplicationsReportButton;
    private javax.swing.JPanel driverApplicationsReportPanel;
    private javax.swing.JTable driverApplicationsReportTable;
    private javax.swing.JTextField fromDateText;
    private javax.swing.JTextField fromDateTextDA;
    private javax.swing.JTextField fromDateTextLA;
    private javax.swing.JTextField fromDateTextPC;
    private javax.swing.JTextField fromDateTextPass;
    private javax.swing.JButton invoiceButton;
    private javax.swing.JButton invoiceCreatePDFButton;
    private javax.swing.JButton invoiceGenerateButton;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JButton loginAttemptsCreatePDFButton;
    private javax.swing.JButton loginAttemptsGenerateButton;
    private javax.swing.JButton loginAttemptsReportButton;
    private javax.swing.JPanel loginAttemptsReportPanel;
    private javax.swing.JTable loginAttemptsReportTable;
    private javax.swing.JPanel myAccount;
    private javax.swing.JButton passwordChangesCreatePDFButton;
    private javax.swing.JButton passwordChangesGenerateButton;
    private javax.swing.JButton passwordChangesReportButton;
    private javax.swing.JPanel passwordChangesReportPanel;
    private javax.swing.JTable passwordChangesReportTable;
    private javax.swing.JButton pointChangesCreatePDFButton;
    private javax.swing.JButton pointChangesGenerateButton;
    private javax.swing.JButton pointChangesReportButton;
    private javax.swing.JPanel pointChangesReportPanel;
    private javax.swing.JTable pointChangesReportTable;
    private javax.swing.JPanel reporting;
    private javax.swing.JLayeredPane reportingLayeredPane;
    private javax.swing.JButton salesByDriverButton;
    private javax.swing.JPanel salesByDriverPanel;
    private javax.swing.JButton salesBySponsorButton;
    private javax.swing.JPanel salesBySponsorPanel;
    private javax.swing.JPanel sponsorView;
    private javax.swing.JTextField toDateText;
    private javax.swing.JTextField toDateTextDA;
    private javax.swing.JTextField toDateTextLA;
    private javax.swing.JTextField toDateTextPC;
    private javax.swing.JTextField toDateTextPass;
    private javax.swing.JButton updateUserInfoButton;
    private javax.swing.JList<String> userAccountList;
    private javax.swing.JTextField userFirstNameField;
    private javax.swing.JTextField userLastNameField;
    private javax.swing.JPasswordField userPasswordField;
    private javax.swing.JTextField userPreferredNameField;
    private javax.swing.JTextField userUsernameField;
    // End of variables declaration//GEN-END:variables
}
