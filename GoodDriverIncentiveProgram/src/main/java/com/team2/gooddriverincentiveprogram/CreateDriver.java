/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.team2.gooddriverincentiveprogram;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author lizst
 */
public class CreateDriver extends javax.swing.JFrame {

    /**
     * Creates new form CreateDriver
     */
    public CreateDriver() {
        initComponents();
    }
    private int selectedCompID = -1;
    private int selectedDriverID = -1;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DriverList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CompanyList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        CreateDriverForCompany = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(191, 192, 192));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Create Driver Account");

        DriverList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        DriverList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                DriverListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(DriverList);

        jLabel2.setText("Select a Driver");

        CompanyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        CompanyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                CompanyListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(CompanyList);

        jLabel3.setText("Select a Company");

        CreateDriverForCompany.setText("Create Account");
        CreateDriverForCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDriverForCompanyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(CreateDriverForCompany)
                .addGap(34, 34, 34))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(293, 293, 293)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CreateDriverForCompany)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Helper method to populate the company list
    public void setCompanyList() throws SQLException {
        DefaultListModel model = new DefaultListModel(); //create a new list model

        PreparedStatement statement = MyConnection.getConnection().prepareStatement("Select * From Company");
        ResultSet resultSet = statement.executeQuery(); //run your query

        while (resultSet.next()) //go through each row that your query returns
        {
            String ItemList = resultSet.getInt("CompanyID") + ": " + resultSet.getString("CompanyName"); //get the element in column "item_code"
            model.addElement(ItemList); //add each item to the model
        }
        CompanyList.setModel(model);

        resultSet.close();
        statement.close();
    }     
    
    public void setDriverList() throws SQLException {
        DefaultListModel model = new DefaultListModel(); //create a new list model

        PreparedStatement statement = MyConnection.getConnection().prepareStatement("Select * From Users Where UserType='D'");
        ResultSet resultSet = statement.executeQuery(); //run your query

        while (resultSet.next()) //go through each row that your query returns
        {
            String ItemList = resultSet.getInt("UserID") + ": " + resultSet.getString("FirstName") + " " + resultSet.getString("MiddleName") + " " + resultSet.getString("LastName"); //get the element in column "item_code"
            model.addElement(ItemList); //add each item to the model
        }
        DriverList.setModel(model);

        resultSet.close();
        statement.close();
    }
    private void DriverListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_DriverListValueChanged
        String selectedDriver = DriverList.getSelectedValue();
        String [] tokens = selectedDriver.split(": ");
        selectedDriverID = Integer.parseInt(tokens[0]);
    }//GEN-LAST:event_DriverListValueChanged

    private void CompanyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_CompanyListValueChanged
        String selectedCompany = CompanyList.getSelectedValue();
        String [] tokens = selectedCompany.split(": ");
        selectedCompID = Integer.parseInt(tokens[0]);
    }//GEN-LAST:event_CompanyListValueChanged

    private void CreateDriverForCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDriverForCompanyActionPerformed
        try {
            if(selectedCompID != -1 && selectedDriverID != -1) {

                int DID = getDriverID();

                //query for driver info from driver points
                PreparedStatement companyDriverPS = MyConnection.getConnection().prepareStatement("Select * From DriverPoints Where DriverID=? AND CompanyID=?");
                companyDriverPS.setInt(1, DID);
                //companyDriverPS.setInt(1, selectedDriverID);
                companyDriverPS.setInt(2, selectedCompID);
                ResultSet companyDriverRS = companyDriverPS.executeQuery();

                //Check to see if this driver already works for the company
                if(companyDriverRS.next()) {
                    JOptionPane.showMessageDialog(null, "Selected driver already works for selected Company.", "Please try again",2);
                }else{//insert the driver into the DriverPoints table
                    PreparedStatement DriverCreationPS = MyConnection.getConnection().prepareStatement("INSERT INTO DriverPoints (DriverID, CompanyID, Points) VALUES (?, ?, ?)");
                    //DriverCreationPS.setInt(1, selectedDriverID);
                    DriverCreationPS.setInt(1, DID);
                    DriverCreationPS.setInt(2, selectedCompID);
                    DriverCreationPS.setInt(3, 0);
                    DriverCreationPS.executeUpdate();
                    this.dispose();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please make a company and driver selection.");
            }
        } catch(Exception e) {
            Logger.getLogger(CreateDriver.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_CreateDriverForCompanyActionPerformed
    private int getDriverID() throws SQLException{
                // Get the driverID
                int ID = 0;
                PreparedStatement DriverPS = MyConnection.getConnection().prepareStatement("Select DriverID From Driver Where UserID=?");
                DriverPS.setInt(1, selectedDriverID);
                ResultSet DriverRS = DriverPS.executeQuery();
                if(DriverRS.next()){
                    ID = DriverRS.getInt("DriverID");
                }
        return ID;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateDriver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> CompanyList;
    private javax.swing.JButton CreateDriverForCompany;
    private javax.swing.JList<String> DriverList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
