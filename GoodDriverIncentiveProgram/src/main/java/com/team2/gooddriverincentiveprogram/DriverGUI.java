/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.team2.gooddriverincentiveprogram;

import java.awt.Image;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListModel;
import org.springframework.security.crypto.bcrypt.BCrypt;

/**
 *
 * @author benjaminjoye
 */
public class DriverGUI extends javax.swing.JFrame {

    /**
     * Creates new form appUI
     */
    public DriverGUI() {
        initComponents();
    }
    
    private int userID;
    private Boolean hasSponsor;
    private int currentCatalogSponsor;
    private Deque<CatalogItem> previousQueue;
    private Deque<CatalogItem> nextQueue;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        logOutButton = new javax.swing.JButton();
        myPointsButton = new javax.swing.JButton();
        myApplicationButton = new javax.swing.JButton();
        catalogButton = new javax.swing.JButton();
        myAccountButton = new javax.swing.JButton();
        purchasesButton = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        profilePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField4 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        applicationPanel = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        catalogPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jButton23 = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jButton24 = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        purchasesPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pointsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Good Driver Incentive Program");
        setBackground(new java.awt.Color(114, 114, 147));

        mainPanel.setBackground(new java.awt.Color(45, 49, 66));
        mainPanel.setMaximumSize(new java.awt.Dimension(940, 576));
        mainPanel.setMinimumSize(new java.awt.Dimension(940, 576));
        mainPanel.setPreferredSize(new java.awt.Dimension(940, 576));

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        myPointsButton.setText("My Points");
        myPointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myPointsButtonActionPerformed(evt);
            }
        });

        myApplicationButton.setText("My Application");
        myApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myApplicationButtonActionPerformed(evt);
            }
        });

        catalogButton.setText("Catalog");
        catalogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalogButtonActionPerformed(evt);
            }
        });

        myAccountButton.setText("My Account");
        myAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAccountButtonActionPerformed(evt);
            }
        });

        purchasesButton.setText("Purchases");
        purchasesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchasesButtonActionPerformed(evt);
            }
        });

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(915, 492));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(915, 492));
        jLayeredPane1.setLayout(new java.awt.CardLayout());

        profilePanel.setBackground(new java.awt.Color(191, 192, 192));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Account");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Username:");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Preferred Name:");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Password:");

        jTextField1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jTextField3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jButton6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton6.setText("Update");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton7.setText("Update");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton8.setText("Update");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton9.setText("Update");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel18.setText("Driver");

        jLabel19.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel19.setText("Account Type:");

        jPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jPasswordField1.setMinimumSize(new java.awt.Dimension(12, 30));
        jPasswordField1.setName(""); // NOI18N
        jPasswordField1.setPreferredSize(new java.awt.Dimension(12, 30));

        jTextField4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jButton16.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton16.setText("Update");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel20.setText("Address:");

        javax.swing.GroupLayout profilePanelLayout = new javax.swing.GroupLayout(profilePanel);
        profilePanel.setLayout(profilePanelLayout);
        profilePanelLayout.setHorizontalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePanelLayout.createSequentialGroup()
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(profilePanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel5))
                        .addGap(61, 61, 61)
                        .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addGroup(profilePanelLayout.createSequentialGroup()
                                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                                    .addComponent(jTextField2)
                                    .addComponent(jTextField3)
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField4))
                                .addGap(18, 18, 18)
                                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jButton9))))
                        .addGap(0, 273, Short.MAX_VALUE))
                    .addGroup(profilePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        profilePanelLayout.setVerticalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(profilePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18))
                .addGap(25, 25, 25))
        );

        jLayeredPane1.add(profilePanel, "card2");

        applicationPanel.setBackground(new java.awt.Color(192, 192, 192));

        jButton10.setText("Submit");
        jButton10.setBorder(null);
        jButton10.setBorderPainted(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel6.setText("Driver Application Form");

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList2);

        jLabel13.setText("Company:");

        javax.swing.GroupLayout applicationPanelLayout = new javax.swing.GroupLayout(applicationPanel);
        applicationPanel.setLayout(applicationPanelLayout);
        applicationPanelLayout.setHorizontalGroup(
            applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationPanelLayout.createSequentialGroup()
                .addGroup(applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(applicationPanelLayout.createSequentialGroup()
                        .addGap(437, 437, 437)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(applicationPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(applicationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(219, Short.MAX_VALUE))
        );
        applicationPanelLayout.setVerticalGroup(
            applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationPanelLayout.createSequentialGroup()
                .addGroup(applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(applicationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(applicationPanelLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel13)
                        .addGap(184, 184, 184)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jLayeredPane1.add(applicationPanel, "card3");

        catalogPanel.setBackground(new java.awt.Color(191, 192, 192));
        catalogPanel.setMinimumSize(new java.awt.Dimension(1266, 492));

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Catalog");

        jPanel1.setMinimumSize(new java.awt.Dimension(833, 307));

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Point Price");

        jButton17.setText("Add to Cart");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jLabel8.setText("ImageURL");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(180, 180, 180))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel8))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Point Price");

        jButton23.setText("Add to Cart");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane8.setViewportView(jTextArea5);

        jLabel9.setText("ImageURL");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel9)
                .addGap(0, 72, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addContainerGap())
        );

        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("Point Price");

        jButton24.setText("Add to Cart");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jScrollPane9.setViewportView(jTextArea6);

        jLabel11.setText("ImageURL");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("Point Price");

        jButton25.setText("Add to Cart");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jScrollPane10.setViewportView(jTextArea7);

        jLabel12.setText("ImageURL");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(425, 425, 425)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Change Sponsor");

        jButton2.setText("Previous");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout catalogPanelLayout = new javax.swing.GroupLayout(catalogPanel);
        catalogPanel.setLayout(catalogPanelLayout);
        catalogPanelLayout.setHorizontalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(catalogPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(catalogPanelLayout.createSequentialGroup()
                                    .addComponent(jButton2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton1))
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel10)))
                .addGap(481, 481, 481))
        );
        catalogPanelLayout.setVerticalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(21, 21, 21)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLayeredPane1.add(catalogPanel, "card4");

        purchasesPanel.setBackground(new java.awt.Color(191, 192, 192));

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 0, 26)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Purchases");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item ID", "Point Cost", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout purchasesPanelLayout = new javax.swing.GroupLayout(purchasesPanel);
        purchasesPanel.setLayout(purchasesPanelLayout);
        purchasesPanelLayout.setHorizontalGroup(
            purchasesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, purchasesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 895, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(purchasesPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        purchasesPanelLayout.setVerticalGroup(
            purchasesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(purchasesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1.add(purchasesPanel, "card2");

        pointsPanel.setBackground(new java.awt.Color(191, 192, 192));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Example", "Example", "Example"},
                {"Example", "Example", "Example"},
                {"Example", "Example", "Example"},
                {"Example", "Example", "Example"}
            },
            new String [] {
                "Item", "Price", "Date Purchased"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton5.setText("My Application");

        jButton15.setText("My Application");

        jLabel17.setText("Recent Purchases");

        javax.swing.GroupLayout pointsPanelLayout = new javax.swing.GroupLayout(pointsPanel);
        pointsPanel.setLayout(pointsPanelLayout);
        pointsPanelLayout.setHorizontalGroup(
            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointsPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                    .addGroup(pointsPanelLayout.createSequentialGroup()
                        .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pointsPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pointsPanelLayout.setVerticalGroup(
            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(jButton5))
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jLayeredPane1.add(pointsPanel, "card6");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(myApplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(catalogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(myAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(myPointsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(purchasesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(315, 315, 315)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 915, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(15, Short.MAX_VALUE)))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalogButton)
                    .addComponent(myApplicationButton)
                    .addComponent(logOutButton)
                    .addComponent(purchasesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myAccountButton)
                    .addComponent(myPointsButton))
                .addContainerGap(513, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                    .addContainerGap(73, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Logout button
    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        //Redirect to login frame
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setTitle("Good Driver Incentive Program - Login");
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    //Preferred Name Update Button
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String newPreferredName = jTextField3.getText();
        try {
            PreparedStatement preferredNameSelectPS;
            ResultSet preferredNameSelectRS;
            String preferredNameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
            preferredNameSelectPS = MyConnection.getConnection().prepareStatement(preferredNameSelectQuery);
            preferredNameSelectPS.setInt(1, this.getUserID());
            preferredNameSelectRS = preferredNameSelectPS.executeQuery();
            if(preferredNameSelectRS.next()) {
                String oldPreferredName = preferredNameSelectRS.getString("PreferredName");
                //If new preferred name is same as old, don't update database
                if(newPreferredName.equals(oldPreferredName)) {
                    JOptionPane.showMessageDialog(null, "New preferred name is the same as your old preferred name.");
                } else {
                    //Update database to have new preferred name
                    PreparedStatement updatePreferredNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET PreferredName=? WHERE UserID=?");
                    updatePreferredNamePreparedStatement.setString(1, newPreferredName);
                    updatePreferredNamePreparedStatement.setInt(2, this.getUserID());
                    updatePreferredNamePreparedStatement.executeUpdate();
                    this.setDriverPreferredName(newPreferredName);
                }
            }
        } catch(SQLException e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    //Password Update Button
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String newPassword = jPasswordField1.getText();
        //Check for valid password using regex
        //https://www.geeksforgeeks.org/how-to-validate-a-password-using-regular-expressions-in-java/
        String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,20}$"; 
        Pattern passwordPattern = Pattern.compile(passwordRegex);
        Matcher passwordMatcher = passwordPattern.matcher(newPassword);
        if(!passwordMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Password must be 8-20 characters, have one uppercase, one lowercase, one digit, one special character, and no white space.");
        } else {
            //If password does match criteria, get the user's current password
            try {
                PreparedStatement passwordSelectPS;
                ResultSet passwordSelectRS;
                String passwordSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                passwordSelectPS = MyConnection.getConnection().prepareStatement(passwordSelectQuery);
                passwordSelectPS.setInt(1, this.getUserID());
                passwordSelectRS = passwordSelectPS.executeQuery();
                if(passwordSelectRS.next()) {
                    String oldPassword = passwordSelectRS.getString("UserPassword");
                    //If new password is same as old, don't update database
                    if(BCrypt.checkpw(newPassword, oldPassword)) {
                        JOptionPane.showMessageDialog(null, "New password is the same as your old password.");
                    } else {
                        //Update database to have new password
                        PreparedStatement updatePasswordPreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET UserPassword=? WHERE UserID=?");
                        String pw_hash = BCrypt.hashpw(newPassword, BCrypt.gensalt());
                        updatePasswordPreparedStatement.setString(1, pw_hash);
                        updatePasswordPreparedStatement.setInt(2, this.getUserID());
                        updatePasswordPreparedStatement.executeUpdate();
                        this.setDriverPassword(newPassword);
                        //Record password change for audit loging
                        PreparedStatement passwordChangePS = MyConnection.getConnection().prepareStatement("INSERT INTO PasswordChange (PasswordChangeDate, PasswordChangeType, UserChangedID, UserChangingID) VALUES (CURRENT_TIMESTAMP, ?, ?, ?)");
                        passwordChangePS.setString(1, "change from profile - self change");
                        passwordChangePS.setInt(2, this.getUserID());
                        passwordChangePS.setInt(3, this.getUserID());
                        passwordChangePS.executeUpdate();
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        try {
            String companyName = jList2.getSelectedValue();
            PreparedStatement companyPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyName=?");
            companyPS.setString(1, companyName);
            ResultSet companyRS = companyPS.executeQuery();
            if (companyRS.next()) {
                int companyID = companyRS.getInt("CompanyID");
                PreparedStatement submitApplicationPS = MyConnection.getConnection().prepareStatement("INSERT INTO DriverApplications (ApplicationDate, CompanyID, DriverID, Reason, ApplicationStatus) VALUES (CURRENT_TIMESTAMP, ?, ?, '-', 'Pending')");
                submitApplicationPS.setInt(1, companyID);
                submitApplicationPS.setInt(2, this.getUserID());
                submitApplicationPS.executeUpdate();
            }
    
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void myAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAccountButtonActionPerformed
        switchPanels(profilePanel);
    }//GEN-LAST:event_myAccountButtonActionPerformed

    private void myApplicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myApplicationButtonActionPerformed
        switchPanels(applicationPanel);
    }//GEN-LAST:event_myApplicationButtonActionPerformed

    private void catalogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalogButtonActionPerformed
        if(hasSponsor()) {
            switchPanels(catalogPanel);
        } else {
            JOptionPane.showMessageDialog(null, "You must be working for a sponsor to view a catalog.");
        }
    }//GEN-LAST:event_catalogButtonActionPerformed

    private void purchasesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchasesButtonActionPerformed
        // TODO add your handling code here:
        switchPanels(purchasesPanel);
    }//GEN-LAST:event_purchasesButtonActionPerformed

    private void myPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myPointsButtonActionPerformed
        switchPanels(pointsPanel);
    }//GEN-LAST:event_myPointsButtonActionPerformed

    //Name Update Button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String newName = jTextField1.getText();
        if(newName.replaceAll(" ", "").equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
        } else {
            String[] splitName = newName.split(" ");
            //Check if all names were entered
            if(splitName.length != 3) {
                JOptionPane.showMessageDialog(null, "Please enter a first, middle, and last name separated by spaces.");
            } else {
                try {
                    String newFirstName = splitName[0];
                    String newMiddleName = splitName[1];
                    String newLastName = splitName[2];
                    PreparedStatement nameSelectPS;
                    ResultSet nameSelectRS;
                    String nameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                    nameSelectPS = MyConnection.getConnection().prepareStatement(nameSelectQuery);
                    nameSelectPS.setInt(1, this.getUserID());
                    nameSelectRS = nameSelectPS.executeQuery();
                    if(nameSelectRS.next()) {
                        //Update the database to have the three new names
                        PreparedStatement updateFirstNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET FirstName=? WHERE UserID=?");
                        updateFirstNamePreparedStatement.setString(1, newFirstName);
                        updateFirstNamePreparedStatement.setInt(2, this.getUserID());
                        PreparedStatement updateMiddleNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET MiddleName=? WHERE UserID=?");
                        updateMiddleNamePreparedStatement.setString(1, newMiddleName);
                        updateMiddleNamePreparedStatement.setInt(2, this.getUserID());
                        PreparedStatement updateLastNamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET LastName=? WHERE UserID=?");
                        updateLastNamePreparedStatement.setString(1, newLastName);
                        updateLastNamePreparedStatement.setInt(2, this.getUserID());
                        updateFirstNamePreparedStatement.executeUpdate();
                        updateMiddleNamePreparedStatement.executeUpdate();
                        updateLastNamePreparedStatement.executeUpdate();
                        this.setDriverName(newName);
                    }
                } catch(SQLException e) {
                    Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //Username Update Button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String newUsername = jTextField2.getText();
        //Check for valid username using regex (email)
        //https://howtodoinjava.com/java/regex/java-regex-validate-email-address/
        String usernameRegex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        Pattern usernamePattern = Pattern.compile(usernameRegex);
        Matcher usernameMatcher = usernamePattern.matcher(newUsername);
        if(!usernameMatcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please enter a valid username.", "Username Invalid", 2);
        } else {
            //If username does match criteria, get the user's current username
            try {
                PreparedStatement usernameSelectPS;
                ResultSet usernameSelectRS;
                String usernameSelectQuery = "SELECT * FROM Users WHERE UserID=?";
                usernameSelectPS = MyConnection.getConnection().prepareStatement(usernameSelectQuery);
                usernameSelectPS.setInt(1, this.getUserID());
                usernameSelectRS = usernameSelectPS.executeQuery();
                if(usernameSelectRS.next()) {
                    String oldUsername = usernameSelectRS.getString("Username");
                    //If new username is same as old, don't update database
                    if(newUsername.equals(oldUsername)) {
                        JOptionPane.showMessageDialog(null, "New username is the same as your old username.");
                    } else {
                        //See if username is already in-use
                        PreparedStatement usernameCheckPS;
                        ResultSet usernameCheckRS;
                        String usernameCheckQuery = "SELECT * FROM Users WHERE Username=?";
                        usernameCheckPS = MyConnection.getConnection().prepareStatement(usernameCheckQuery);
                        usernameCheckPS.setString(1, newUsername);
                        usernameCheckRS = usernameCheckPS.executeQuery();
                        //If new username is already being used by another account, don't update database
                        if(usernameCheckRS.next()) {
                            JOptionPane.showMessageDialog(null, "Username already in use by another account.");
                        } else {
                            //Update database to have new username
                            PreparedStatement updateUsernamePreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Users SET Username=? WHERE UserID=?");
                            updateUsernamePreparedStatement.setString(1, newUsername);
                            updateUsernamePreparedStatement.setInt(2, this.getUserID());
                            updateUsernamePreparedStatement.executeUpdate();
                            this.setDriverUsername(newUsername);
                        }
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    //Update Address button
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        String newAddress = jTextField4.getText();
        //Check if address was entered
        if(newAddress.replaceAll(" ", "").equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter an address.");
        } else {
            //If address was entered, get the user's current address
            try {
                PreparedStatement driverSelectPS;
                ResultSet driverSelectRS;
                String driverSelectQuery = "SELECT * FROM Driver WHERE UserID=?";
                driverSelectPS = MyConnection.getConnection().prepareStatement(driverSelectQuery);
                driverSelectPS.setInt(1, this.getUserID());
                driverSelectRS = driverSelectPS.executeQuery();
                if(driverSelectRS.next()) {
                    String oldAddress = driverSelectRS.getString("Address");
                    //If new username is same as old, don't update database
                    if(newAddress.equals(oldAddress)) {
                        JOptionPane.showMessageDialog(null, "New address is the same as your old address.");
                    } else {
                        //Update database to have new address
                        PreparedStatement updateAddressPreparedStatement = MyConnection.getConnection().prepareStatement("UPDATE Driver SET Address=? WHERE UserID=?");
                        updateAddressPreparedStatement.setString(1, newAddress);
                        updateAddressPreparedStatement.setInt(2, this.getUserID());
                        updateAddressPreparedStatement.executeUpdate();
                        this.setDriverAddress(newAddress);
                    }
                }
            } catch(SQLException e) {
                Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    //Get previous amount of catalog items (up to four) from database list
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Get current items (up to four) and add them to the front of next queue (using .isVisible)
        try {
            PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
            pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
            ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
            int pointToDollarRatio = 100;
            if(pointToDollarRS.next()) {
                pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
            }
            //jPanel15 (jTextArea7 - ID:Title, jLabel41 - PointPrice, jLabel12 - ImageURL)
            if(jPanel15.isVisible()) {
                String title = jTextArea7.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(jLabel41.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = jLabel12.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //jPanel14 (jTextArea6 - ID:Title, jLabel39 - PointPrice, jLabel11 - ImageURL)
            if(jPanel14.isVisible()) {
                String title = jTextArea6.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(jLabel39.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = jLabel11.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //jPanel13 (jTextArea5 - ID:Title, jLabel37 - PointPrice, jLabel9 - ImageURL)
            if(jPanel13.isVisible()) {
                String title = jTextArea5.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(jLabel37.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = jLabel9.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //jPanel7 (jTextArea1 - Title, jLabel23 - PointPrice, jLabel8 - ImageURL)
            if(jPanel7.isVisible()) {
                String title = jTextArea1.getText();
                String[] tokens = title.split(": ");
                int itemID = Integer.parseInt(tokens[0]);
                title = tokens[1];
                double price = Double.parseDouble(jLabel23.getText().split(" ")[0]) / pointToDollarRatio;
                String imageURL = jLabel8.getText();
                CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
                nextQueue.addFirst(newItem);
            }
            //Make next button visible
            jButton1.setVisible(true);
            //Get previous four items and display them through previousQueue
            //Update jPanel15 to have item information
            jPanel15.setVisible(true);
            CatalogItem previousItem = previousQueue.removeLast();
            //Set item title
            jTextArea7.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            double price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            jLabel41.setText(price + " Points");
            //Set item image
            String imageURL = previousItem.getImageURL();
            jLabel12.setText(imageURL);
            URL url = new URL(imageURL);
            Image image = ImageIO.read(url);
            jLabel42.setIcon(new ImageIcon(image));
            //Update jPanel14 to have item information
            jPanel14.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            jTextArea6.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            jLabel39.setText(price + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            jLabel11.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            jLabel40.setIcon(new ImageIcon(image));
            //Update jPanel13 to have item information
            jPanel13.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            jTextArea5.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            jLabel37.setText(price + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            jLabel9.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            jLabel38.setIcon(new ImageIcon(image));
            //Update jPanel7 to have item information
            jPanel7.setVisible(true);
            previousItem = previousQueue.removeLast();
            //Set item title
            jTextArea1.setText(previousItem.getItemID() + ": " + previousItem.getTitle());
            //Get item price and convert to point value
            price = previousItem.getPrice();
            price = price * pointToDollarRatio;
            jLabel23.setText(price + " Points");
            //Set item image
            imageURL = previousItem.getImageURL();
            jLabel8.setText(imageURL);
            url = new URL(imageURL);
            image = ImageIO.read(url);
            jLabel24.setIcon(new ImageIcon(image));
            //If more items exist, leave previous button
            //Otherwise, make it invisible
            if(previousQueue.isEmpty()) {
                jButton2.setVisible(false);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //Different company selected from list
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        String selectedCompany = jList1.getSelectedValue();
        String[] tokens = selectedCompany.split(":");
        int selectedCompanyID = Integer.parseInt(tokens[0]);
        setCurrentCatalogSponsor(selectedCompanyID, tokens[1]);
    }//GEN-LAST:event_jList1ValueChanged

    //Get next amount of catalog items (up to four) from database list
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Get current four items and add them to the previous queue
        try {
            PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
            pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
            ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
            int pointToDollarRatio = 100;
            if(pointToDollarRS.next()) {
                pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
            }
            //jPanel7 (jTextArea1 - Title, jLabel23 - PointPrice, jLabel8 - ImageURL)
            String title = jTextArea1.getText();
            String[] tokens = title.split(": ");
            int itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            double price = Double.parseDouble(jLabel23.getText().split(" ")[0]) / pointToDollarRatio;
            String imageURL = jLabel8.getText();
            CatalogItem newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //jPanel13 (jTextArea5 - ID:Title, jLabel37 - PointPrice, jLabel9 - ImageURL)
            title = jTextArea5.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(jLabel37.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = jLabel9.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //jPanel14 (jTextArea6 - ID:Title, jLabel39 - PointPrice, jLabel11 - ImageURL)
            title = jTextArea6.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(jLabel39.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = jLabel11.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //jPanel15 (jTextArea7 - ID:Title, jLabel41 - PointPrice, jLabel12 - ImageURL)
            title = jTextArea7.getText();
            tokens = title.split(": ");
            itemID = Integer.parseInt(tokens[0]);
            title = tokens[1];
            price = Double.parseDouble(jLabel41.getText().split(" ")[0]) / pointToDollarRatio;
            imageURL = jLabel12.getText();
            newItem = new CatalogItem(itemID, price, title, imageURL);
            previousQueue.add(newItem);
            //Make previous button visible
            jButton2.setVisible(true);
            //Get next number of items (up to four) and display them
            if(!nextQueue.isEmpty()) {
                jPanel7.setVisible(true);
                //Update jPanel7 to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                jTextArea1.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                jLabel23.setText(price + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                jLabel8.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                jLabel24.setIcon(new ImageIcon(image));
            } else {
                jPanel7.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                jPanel13.setVisible(true);
                //Update jPanel13 to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                jTextArea5.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                jLabel37.setText(price + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                jLabel9.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                jLabel38.setIcon(new ImageIcon(image));
            } else {
                jPanel13.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                jPanel14.setVisible(true);
                //Update jPanel14 to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                jTextArea6.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                jLabel39.setText(price + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                jLabel11.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                jLabel40.setIcon(new ImageIcon(image));
            } else {
                jPanel14.setVisible(false);
            }
            if(!nextQueue.isEmpty()) {
                jPanel15.setVisible(true);
                //Update jPanel15 to have item information
                CatalogItem nextItem = nextQueue.removeFirst();
                //Set item title
                jTextArea7.setText(nextItem.getItemID() + ": " + nextItem.getTitle());
                //Get item price and convert to point value
                price = nextItem.getPrice();
                price = price * pointToDollarRatio;
                jLabel41.setText(price + " Points");
                //Set item image
                imageURL = nextItem.getImageURL();
                jLabel12.setText(imageURL);
                URL url = new URL(imageURL);
                Image image = ImageIO.read(url);
                jLabel42.setIcon(new ImageIcon(image));
            } else {
                jPanel15.setVisible(false);
            }
            //If more items exist, leave next button
            //Otherwise, make it invisible
            if(nextQueue.isEmpty()) {
                jButton1.setVisible(false);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            PreparedStatement driverPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Driver WHERE UserID=?");
            driverPS.setInt(1, userID);
            ResultSet driverRS = driverPS.executeQuery();
            if(driverRS.next()) {
                int driverID = driverRS.getInt("DriverID");
                PreparedStatement PointsPS = MyConnection.getConnection().prepareStatement("SELECT Points FROM DriverPoints WHERE DriverID=?");
                PointsPS.setInt(1,driverID);
                ResultSet PointRS = PointsPS.executeQuery();
                if(PointRS.next()) {
                    int points = PointRS.getInt("Points");
                    String s=String.valueOf(points);
                    jLabel13.setText(s);
                }
                else{
                    jLabel13.setText("0");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3ActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed1

    }//GEN-LAST:event_jButton3ActionPerformed1

    //Helper Methods for getting and setting user information in profile
    public void setDriverName(String name) {
        jTextField1.setText(name);
    }
    
    public void setDriverUsername(String username) {
        jTextField2.setText(username);
    }
    
    public void setDriverPreferredName(String preferredName) {
        jTextField3.setText(preferredName);
    }
    
    public void setDriverPassword(String password) {
        jPasswordField1.setText(password);
    }
    
    public void setDriverAddress(String address) {
        jTextField4.setText(address);
    }
    
    public JPanel getProfilePanel() {
        return profilePanel;
    }
    
    public void setUserID(int id) {
        userID = id;
    }
    
    public int getUserID() {
        return userID;
    }
    
    public Boolean hasSponsor() {
        return hasSponsor;
    }
    
    public void setHasSponsor(Boolean has) {
        hasSponsor = has;
    }
    
    public void setCurrentCatalogSponsor(int companyID, String companyName) {
        jLabel7.setText(companyName + " Catalog");
        currentCatalogSponsor = companyID;
        nextQueue = new LinkedList<>();
        previousQueue = new LinkedList<>();
        updateCatalogItems(companyID);
    }
    
    public int getCurrentCatalogSponsor() {
        return currentCatalogSponsor;
    }
    
    
    public void setApplicationCompanyList(int userID) {
        ArrayList<String> listDataArrayList = new ArrayList<String>();
        try {
            PreparedStatement sponsorPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Sponsor WHERE UserID!=?");
            int companyCounter = 0;
            sponsorPS.setInt(1, userID);
            ResultSet sponsorRS = sponsorPS.executeQuery();
            while(sponsorRS.next()) {
                int companyID = sponsorRS.getInt("CompanyID");
                PreparedStatement sponsorCompanyPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                sponsorCompanyPS.setInt(1, companyID);
                ResultSet sponsorCompanyRS = sponsorCompanyPS.executeQuery();
                if(sponsorCompanyRS.next()) {
                    listDataArrayList.add(sponsorCompanyRS.getString("CompanyName"));
                    companyCounter++;
                }
            }

            String[] listData = listDataArrayList.toArray(new String[listDataArrayList.size()]);
            jList2.setListData(listData);
           
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Helper method to populate the potential sponsoring company list for catalog
    public void setSponsorCatalogList(int userID) {
        ArrayList<String> listDataArrayList = new ArrayList<String>();
        try {
            PreparedStatement driverPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Driver WHERE UserID=?");
            int sponsorCounter = 0;
            driverPS.setInt(1, userID);
            ResultSet driverRS = driverPS.executeQuery();
            if(driverRS.next()) {
                int driverID = driverRS.getInt("DriverID");
                PreparedStatement driverSponsorsPS = MyConnection.getConnection().prepareStatement("SELECT * FROM DriverPoints WHERE DriverID=?");
                driverSponsorsPS.setInt(1, driverID);
                ResultSet driverSponsorRS = driverSponsorsPS.executeQuery();
                while(driverSponsorRS.next()) {
                    int companyID = driverSponsorRS.getInt("CompanyID");
                    PreparedStatement companyNamePS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                    companyNamePS.setInt(1, companyID);
                    ResultSet companyNameRS = companyNamePS.executeQuery();
                    if(companyNameRS.next()) {
                        listDataArrayList.add(companyID + ": " + companyNameRS.getString("CompanyName"));
                        sponsorCounter++;
                    }
                }
            }
            if(sponsorCounter == 0) {
                setHasSponsor(false);
            } else {
                setHasSponsor(true);
                String[] listData = listDataArrayList.toArray(new String[listDataArrayList.size()]);
                jList1.setListData(listData);
                String currentCompany = listData[0];
                String[] tokens = currentCompany.split(":");
                int currentCompanyID = Integer.parseInt(tokens[0]);
                setCurrentCatalogSponsor(currentCompanyID, tokens[1]);
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Helper method for showing catalog items based on sponsoring company selected
    public void updateCatalogItems(int companyID) {
        try {
            //Get total number of catalog items for company
            PreparedStatement catalogItemCountPS = MyConnection.getConnection().prepareStatement("SELECT COUNT(*) FROM CatalogItems WHERE CompanyID=?");
            catalogItemCountPS.setInt(1, companyID);
            ResultSet catalogItemCountRS = catalogItemCountPS.executeQuery();
            if(catalogItemCountRS.next()) {
                int count = catalogItemCountRS.getInt(1);
                if(count <= 0) {
                    //Show message if there are no items in the catalog
                    jPanel1.setVisible(false);
                    jPanel7.setVisible(false);
                    jPanel13.setVisible(false);
                    jPanel14.setVisible(false);
                    jPanel15.setVisible(false);
                    jButton1.setVisible(false);
                    jButton2.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Catalog is empty.");
                } else if(count == 1) {
                    //Only show one panel if there is one item
                    jPanel1.setVisible(true);
                    jPanel7.setVisible(true);
                    jLabel8.setVisible(false);
                    jPanel13.setVisible(false);
                    jPanel14.setVisible(false);
                    jPanel15.setVisible(false);
                    jButton1.setVisible(false);
                    jButton2.setVisible(false);
                    //Update jPanel7 to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=?");
                    catalogItemPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea1.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                        pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
                        ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                        if(pointToDollarRS.next()) {
                            int pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                            price = price * pointToDollarRatio;
                            jLabel23.setText(price + " Points");
                        }
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel8.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel24.setIcon(new ImageIcon(image));
                    }
                } else if(count == 2) {
                    //Only show two panels if there are two items
                    jPanel1.setVisible(true);
                    jPanel7.setVisible(true);
                    jLabel8.setVisible(false);
                    jPanel13.setVisible(true);
                    jLabel9.setVisible(false);
                    jPanel14.setVisible(false);
                    jPanel15.setVisible(false);
                    jButton1.setVisible(false);
                    jButton2.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                    pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    //Update jPanel7 to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=?");
                    catalogItemPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea1.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel23.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel8.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel24.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel13 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea5.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel37.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel9.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel38.setIcon(new ImageIcon(image));
                    }
                } else if(count == 3) {
                    //Only show three panels if there are three items
                    jPanel1.setVisible(true);
                    jPanel7.setVisible(true);
                    jLabel8.setVisible(false);
                    jPanel13.setVisible(true);
                    jLabel9.setVisible(false);
                    jPanel14.setVisible(true);
                    jLabel11.setVisible(false);
                    jPanel15.setVisible(false);
                    jButton1.setVisible(false);
                    jButton2.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                    pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=?");
                    catalogItemPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    //Update jPanel7 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea1.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel23.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel8.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel24.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel13 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea5.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel37.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel9.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel38.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel14 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea6.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel39.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel11.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel40.setIcon(new ImageIcon(image));
                    }
                } else if(count == 4) {
                    //Only show four panels if there are four items
                    jPanel1.setVisible(true);
                    jPanel7.setVisible(true);
                    jLabel8.setVisible(false);
                    jPanel13.setVisible(true);
                    jLabel9.setVisible(false);
                    jPanel14.setVisible(true);
                    jLabel11.setVisible(false);
                    jPanel15.setVisible(true);
                    jLabel12.setVisible(false);
                    jButton1.setVisible(false);
                    jButton2.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                    pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    //Update jPanel7 to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=?");
                    catalogItemPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea1.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel23.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel8.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel24.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel13 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea5.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel37.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel9.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel38.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel14 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea6.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel39.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel11.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel40.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel15 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea7.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel41.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel12.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel42.setIcon(new ImageIcon(image));
                    }
                } else {
                    //Show next button if there are more
                    jPanel1.setVisible(true);
                    jPanel7.setVisible(true);
                    jLabel8.setVisible(false);
                    jPanel13.setVisible(true);
                    jLabel9.setVisible(false);
                    jPanel14.setVisible(true);
                    jLabel11.setVisible(false);
                    jPanel15.setVisible(true);
                    jLabel12.setVisible(false);
                    jButton1.setVisible(true);
                    jButton2.setVisible(false);
                    //Get pointToDollar conversion ratio
                    int pointToDollarRatio = 100;
                    PreparedStatement pointToDollarPS = MyConnection.getConnection().prepareStatement("SELECT * FROM Company WHERE CompanyID=?");
                    pointToDollarPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet pointToDollarRS = pointToDollarPS.executeQuery();
                    if(pointToDollarRS.next()) {
                        pointToDollarRatio = pointToDollarRS.getInt("PointToDollar");
                    }
                    //Update jPanel7 to have item information
                    PreparedStatement catalogItemPS = MyConnection.getConnection().prepareStatement("SELECT * FROM CatalogItems WHERE CompanyID=?");
                    catalogItemPS.setInt(1, getCurrentCatalogSponsor());
                    ResultSet catalogItemRS = catalogItemPS.executeQuery();
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea1.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel23.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel8.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel24.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel13 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea5.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel37.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel9.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel38.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel14 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea6.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel39.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel11.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel40.setIcon(new ImageIcon(image));
                    }
                    //Update jPanel15 to have item information
                    if(catalogItemRS.next()) {
                        //Set item title
                        jTextArea7.setText(catalogItemRS.getInt("ItemID") + ": " + catalogItemRS.getString("ItemDescription"));
                        //Get item price and convert to point value
                        double price = catalogItemRS.getDouble("Price");
                        price = price * pointToDollarRatio;
                        jLabel41.setText(price + " Points");
                        //Set item image
                        String imageURL = catalogItemRS.getString("ItemImage");
                        jLabel12.setText(imageURL);
                        URL url = new URL(imageURL);
                        Image image = ImageIO.read(url);
                        jLabel42.setIcon(new ImageIcon(image));
                    }
                    //Store remaining items in array for access by "Next" button
                    while(catalogItemRS.next()) {
                        CatalogItem newCatalogItem = new CatalogItem(catalogItemRS.getInt("ItemID"), catalogItemRS.getDouble("Price"), catalogItemRS.getString("ItemDescription"), catalogItemRS.getString("ItemImage"));
                        nextQueue.addLast(newCatalogItem);
                    }
                }
            }
        } catch(Exception e) {
            Logger.getLogger(DriverGUI.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    //Helper Class for catalog items
    public class CatalogItem {
        private int itemID;
        private double price;
        private String title;
        private String imageURL;
        
        public CatalogItem(int inItemID, double inPrice, String inTitle, String inImageURL) {
            itemID = inItemID;
            price = inPrice;
            title = inTitle;
            imageURL = inImageURL;
        }
        
        public int getItemID() {
            return itemID;
        }
        
        public double getPrice() {
            return price;
        }
        
        public String getTitle() {
            return title;
        }
        
        public String getImageURL() {
            return imageURL;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DriverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DriverGUI().setVisible(true);
            }
        });
    }
    
    public void switchPanels(JPanel panel)
    {
        jLayeredPane1.removeAll();
        jLayeredPane1.add(panel);
        jLayeredPane1.repaint();
        jLayeredPane1.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel applicationPanel;
    private javax.swing.JButton catalogButton;
    private javax.swing.JPanel catalogPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton logOutButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton myAccountButton;
    private javax.swing.JButton myApplicationButton;
    private javax.swing.JButton myPointsButton;
    private javax.swing.JPanel pointsPanel;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JButton purchasesButton;
    private javax.swing.JPanel purchasesPanel;
    // End of variables declaration//GEN-END:variables
}
